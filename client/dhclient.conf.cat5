


Headers, Environments, and Macros                dhclient.conf(5)



NNNNAAAAMMMMEEEE
     dhclient.conf - DHCP client configuration file

DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
     The dhclient.conf file  contains  configuration  information
     for _d_h_c_l_i_e_n_t, the Internet Software Consortium DHCP Client.

     The dhclient.conf file is a free-form ASCII text file.    It
     is   parsed  by  the  recursive-descent  parser  built  into
     dhclient.   The file may contain extra tabs and newlines for
     formatting   purposes.   Keywords  in  the  file  are  case-
     insensitive.   Comments may be placed  anywhere  within  the
     file  (except  within  quotes).    Comments begin with the #
     character and end at the end of the line.

     The  dhclient.conf  file  can  be  used  to  configure   the
     behaviour  of the client in a wide variety of ways: protocol
     timing, information requested from the  server,  information
     required  of  the server, defaults to use if the server does
     not provide certain information, values with which to  over-
     ride  information  provided  by  the  server,  or  values to
     prepend or append to information  provided  by  the  server.
     The  configuration  file  can  also  be  preinitialized with
     addresses to use on networks that don't have DHCP servers.

PPPPRRRROOOOTTTTOOOOCCCCOOOOLLLL TTTTIIIIMMMMIIIINNNNGGGG
     The timing behaviour of the client need not be configured by
     the  user.   If  no  timing configuration is provided by the
     user, a fairly reasonable timing behaviour will be  used  by
     default - one which results in fairly timely updates without
     placing an inordinate load on the server.

     The following statements can be used to  adjust  the  timing
     behaviour of the DHCP client if required, however:

     _T_h_e ttttiiiimmmmeeeeoooouuuutttt _s_t_a_t_e_m_e_n_t

     ttttiiiimmmmeeeeoooouuuutttt _t_i_m_e ;;;;

     The _t_i_m_e_o_u_t statement determines the  amount  of  time  that
     must  pass between the time that the client begins to try to
     determine its address and the time that it decides that it's
     not going to be able to contact a server.   By default, this
     timeout is sixty seconds.   After the timeout has passed, if
     there  are  any  static  leases defined in the configuration
     file, or any leases remaining in  the  lease  database  that
     have  not  yet  expired,  the client will loop through these
     leases attempting to validate them, and if it finds one that
     appears  to be valid, it will use that lease's address.   If
     there are no valid static leases or unexpired leases in  the
     lease  database,  the client will restart the protocol after
     the defined retry interval.



SunOS 5.6                 Last change:                          1






Headers, Environments, and Macros                dhclient.conf(5)



     _T_h_e rrrreeeettttrrrryyyy _s_t_a_t_e_m_e_n_t

      rrrreeeettttrrrryyyy _t_i_m_e;;;;

     The _r_e_t_r_y statement determines the time that must pass after
     the  client  has  determined  that  there  is no DHCP server
     present before it tries again to contact a DHCP server.   By
     default, this is five minutes.

     _T_h_e sssseeeelllleeeecccctttt----ttttiiiimmmmeeeeoooouuuutttt _s_t_a_t_e_m_e_n_t

      sssseeeelllleeeecccctttt----ttttiiiimmmmeeeeoooouuuutttt _t_i_m_e;;;;

     It is possible (some might say desirable) for  there  to  be
     more  than  one  DHCP server serving any given network.   In
     this case, it is possible that a client  may  be  sent  more
     than  one  offer  in response to its initial lease discovery
     message.   It may be that one of these offers is  preferable
     to  the  other  (e.g.,  one  offer  may have the address the
     client previously used, and the other may not).

     The _s_e_l_e_c_t-_t_i_m_e_o_u_t is the time after the  client  sends  its
     first  lease discovery request at which it stops waiting for
     offers from servers, assuming that it has received at  least
     one  such  offer.    If  no offers have been received by the
     time the _s_e_l_e_c_t-_t_i_m_e_o_u_t has expired, the client will  accept
     the first offer that arrives.

     By default, the select-timeout is zero seconds  -  that  is,
     the client will take the first offer it sees.

     _T_h_e rrrreeeebbbbooooooootttt _s_t_a_t_e_m_e_n_t

      rrrreeeebbbbooooooootttt _t_i_m_e;;;;

     When the client is restarted, it first  tries  to  reacquire
     the  last  address  it had.   This is called the INIT-REBOOT
     state.   If it is still attached to the same network it  was
     attached  to  when  it last ran, this is the quickest way to
     get started.   The _r_e_b_o_o_t statement sets the time that  must
     elapse  after  the  client  first tries to reacquire its old
     address before it gives up  and  tries  to  discover  a  new
     address.   By default, the reboot timeout is ten seconds.

     _T_h_e bbbbaaaacccckkkkooooffffffff----ccccuuuuttttooooffffffff _s_t_a_t_e_m_e_n_t

      bbbbaaaacccckkkkooooffffffff----ccccuuuuttttooooffffffff _t_i_m_e;;;;

     The client uses an exponential backoff algorithm  with  some
     randomness,  so  that if many clients try to configure them-
     selves at the same time, they will not make  their  requests
     in  lockstep.    The _b_a_c_k_o_f_f-_c_u_t_o_f_f statement determines the



SunOS 5.6                 Last change:                          2






Headers, Environments, and Macros                dhclient.conf(5)



     maximum amount of time that the client is  allowed  to  back
     off.   It defaults to two minutes.

     _T_h_e iiiinnnniiiittttiiiiaaaallll----iiiinnnntttteeeerrrrvvvvaaaallll _s_t_a_t_e_m_e_n_t

      iiiinnnniiiittttiiiiaaaallll----iiiinnnntttteeeerrrrvvvvaaaallll _t_i_m_e;;;;

     The _i_n_i_t_i_a_l-_i_n_t_e_r_v_a_l  statement  sets  the  amount  of  time
     between  the  first attempt to reach a server and the second
     attempt to reach a server.  Each time a message is sent, the
     interval  between  messages  is  incremented  by  twice  the
     current interval multiplied by a random number between  zero
     and  one.   If it is greater than the backoff-cutoff amount,
     it is set to that amount.  It defaults to ten seconds.

LLLLEEEEAAAASSSSEEEE RRRREEEEQQQQUUUUIIIIRRRREEEEMMMMEEEENNNNTTTTSSSS AAAANNNNDDDD RRRREEEEQQQQUUUUEEEESSSSTTTTSSSS
     The DHCP protocol allows the  client  to  request  that  the
     server  send  it specific information, and not send it other
     information that it is not prepared to accept.   The  proto-
     col  also allows the client to reject offers from servers if
     they don't contain information the client needs, or  if  the
     information provided is not satisfactory.

     There is a variety of data contained  in  offers  that  DHCP
     servers send to DHCP clients.  The data that can be specifi-
     cally requested is  what  are  called  _D_H_C_P  _O_p_t_i_o_n_s.   DHCP
     Options are defined in
      ddddhhhhccccpppp----ooooppppttttiiiioooonnnnssss((((5555)))).

     _T_h_e rrrreeeeqqqquuuueeeesssstttt _s_t_a_t_e_m_e_n_t

      rrrreeeeqqqquuuueeeesssstttt [[[[ _o_p_t_i_o_n ] [,,,, ... _o_p_t_i_o_n ];;;;

     The request statement causes the client to request that  any
     server  responding  to the client send the client its values
     for the specified options.   Only the option names should be
     specified in the request statement - not option parameters.

     _T_h_e rrrreeeeqqqquuuuiiiirrrreeee _s_t_a_t_e_m_e_n_t

      rrrreeeeqqqquuuuiiiirrrreeee [[[[ _o_p_t_i_o_n ] [,,,, ... _o_p_t_i_o_n ];;;;

     The require statement lists options that  must  be  sent  in
     order for an offer to be accepted.   Offers that do not con-
     tain all the listed options will be ignored.

     _T_h_e sssseeeennnndddd _s_t_a_t_e_m_e_n_t

      sssseeeennnndddd {{{{ [[[[ _o_p_t_i_o_n _d_e_c_l_a_r_a_t_i_o_n ] [,,,, ... _o_p_t_i_o_n _d_e_c_l_a_r_a_t_i_o_n ]}}}}

     The send statement causes the client to send  the  specified
     options  to the server with the specified values.  These are



SunOS 5.6                 Last change:                          3






Headers, Environments, and Macros                dhclient.conf(5)



     full option declarations as  described  in  ddddhhhhccccpppp----ooooppppttttiiiioooonnnnssss((((5555)))).
     Options that are always sent in the DHCP protocol should not
     be specified here, except that  the  client  can  specify  a
     rrrreeeeqqqquuuueeeesssstttteeeedddd----lllleeeeaaaasssseeee----ttttiiiimmmmeeee option other than the default requested
     lease time, which is two hours.  The other obvious  use  for
     this  statement  is  to  send information to the server that
     will allow it to differentiate between this client and other
     clients or kinds of clients.

OOOOPPPPTTTTIIIIOOOONNNN MMMMOOOODDDDIIIIFFFFIIIIEEEERRRRSSSS
     In some cases, a client may receive  option  data  from  the
     server  which  is not really appropriate for that client, or
     may not receive information that it needs, and for  which  a
     useful  default value exists.   It may also receive informa-
     tion which is useful, but which  needs  to  be  supplemented
     with  local  information.    To  handle these needs, several
     option modifiers are available.

     _T_h_e ddddeeeeffffaaaauuuulllltttt _s_t_a_t_e_m_e_n_t

      ddddeeeeffffaaaauuuulllltttt [[[[ _o_p_t_i_o_n _d_e_c_l_a_r_a_t_i_o_n ] ;;;;

     If for some option the client should use the value  supplied
     by  the  server,  but  needs to use some default value if no
     value was supplied  by  the  server,  these  values  can  be
     defined in the ddddeeeeffffaaaauuuulllltttt statement.

     _T_h_e ssssuuuuppppeeeerrrrsssseeeeddddeeee _s_t_a_t_e_m_e_n_t

      ssssuuuuppppeeeerrrrsssseeeeddddeeee [[[[ _o_p_t_i_o_n _d_e_c_l_a_r_a_t_i_o_n ] ;;;;

     If for some option the client should always use  a  locally-
     configured  value or values rather than whatever is supplied
     by the server, these values can be defined in the  ssssuuuuppppeeeerrrrsssseeeeddddeeee
     statement.

     _T_h_e pppprrrreeeeppppeeeennnndddd _s_t_a_t_e_m_e_n_t

      pppprrrreeeeppppeeeennnndddd [[[[ _o_p_t_i_o_n _d_e_c_l_a_r_a_t_i_o_n ] ;;;;

     If for some option the client should use  both  a  value  it
     supplies,  and then any values supplied by the server, these
     values can  be  defined  in  the  pppprrrreeeeppppeeeennnndddd  statement.    The
     pppprrrreeeeppppeeeennnndddd  statement  can only be used for options which allow
     more than one value to be given.

     _T_h_e aaaappppppppeeeennnndddd _s_t_a_t_e_m_e_n_t

      aaaappppppppeeeennnndddd [[[[ _o_p_t_i_o_n _d_e_c_l_a_r_a_t_i_o_n ] ;;;;

     If for some option the client should first any  values  sup-
     plied to it by the server, and then some values it supplies,



SunOS 5.6                 Last change:                          4






Headers, Environments, and Macros                dhclient.conf(5)



     those values should be  defined  in  the  aaaappppppppeeeennnndddd  statement.
     The  aaaappppppppeeeennnndddd  statement  can  only  be used for options which
     allow more than one value to be given.

LLLLEEEEAAAASSSSEEEE DDDDEEEECCCCLLLLAAAARRRRAAAATTTTIIIIOOOONNNNSSSS
     _T_h_e lllleeeeaaaasssseeee _d_e_c_l_a_r_a_t_i_o_n

      lllleeeeaaaasssseeee {{{{ _l_e_a_s_e-_d_e_c_l_a_r_a_t_i_o_n [ ... _l_e_a_s_e-_d_e_c_l_a_r_a_t_i_o_n ] }}}}

     The DHCP client may decide after some period  of  time  (see
     PPPPRRRROOOOTTTTOOOOCCCCOOOOLLLL  TTTTIIIIMMMMIIIINNNNGGGG)  decide that it is not going to succeed in
     contacting a server.   At that time,  it  consults  its  own
     database  of  old leases and tests each one that has not yet
     timed out by pinging the listed router for that lease to see
     if  that lease could work.   It is possible to define one or
     more _f_i_x_e_d leases in the client configuration file for  net-
     works  where  there is no DHCP or BOOTP service, so that the
     client can still automatically configure its address.   This
     is done with the lllleeeeaaaasssseeee statement.

     NOTE:  the   lease   statement   is   also   used   in   the
     dhclient.leases  file  in  order  to record leases that have
     been received from DHCP servers.  Some  of  the  syntax  for
     leases   as   described   below   is   only  needed  in  the
     dhclient.leases file.   Such syntax is documented  here  for
     completeness.

     A lease statement consists of the lease keyword, followed by
     a  left  curly brace, followed by one or more lease declara-
     tion statements, followed by a right curly brace.   The fol-
     lowing lease declarations are possible:

      bbbboooooooottttpppp;;;;

     The bbbboooooooottttpppp statement is used to indicate that the  lease  was
     acquired  using the BOOTP protocol rather than the DHCP pro-
     tocol.   It is never necessary to specify this in the client
     configuration  file.    The  client  uses this syntax in its
     lease database file.

      iiiinnnntttteeeerrrrffffaaaacccceeee """"_s_t_r_i_n_g"""";;;;

     The iiiinnnntttteeeerrrrffffaaaacccceeee lease statement is used to indicate the inter-
     face  on which the lease is valid.   If set, this lease will
     only be tried on a particular interface.   When  the  client
     receives a lease from a server, it always records the inter-
     face number on which it received that lease.  If  predefined
     leases  are  specified in the dhclient.conf file, the inter-
     face  should  also  be  specified,  although  this  is   not
     required.





SunOS 5.6                 Last change:                          5






Headers, Environments, and Macros                dhclient.conf(5)



      ffffiiiixxxxeeeedddd----aaaaddddddddrrrreeeessssssss _i_p-_a_d_d_r_e_s_s;;;;

     The ffffiiiixxxxeeeedddd----aaaaddddddddrrrreeeessssssss statement is used to set the ip address of
     a  particular lease.   This is required for all lease state-
     ments.   The IP address must be specified as a  dotted  quad
     (e.g., 12.34.56.78).

      ffffiiiilllleeeennnnaaaammmmeeee """"_s_t_r_i_n_g"""";;;;

     The ffffiiiilllleeeennnnaaaammmmeeee  statement  specifies  the  name  of  the  boot
     filename  to  use.   This is not used by the standard client
     configuration script, but is included for completeness.

      sssseeeerrrrvvvveeeerrrr----nnnnaaaammmmeeee """"_s_t_r_i_n_g"""";;;;

     The sssseeeerrrrvvvveeeerrrr----nnnnaaaammmmeeee statement specifies the  name  of  the  boot
     server  name to use.   This is also not used by the standard
     client configuration script.

      ooooppppttttiiiioooonnnn _o_p_t_i_o_n-_d_e_c_l_a_r_a_t_i_o_n;;;;

     The ooooppppttttiiiioooonnnn statement is used to  specify  the  value  of  an
     option supplied by the server, or, in the case of predefined
     leases declared in dhclient.conf, the value  that  the  user
     wishes  the client configuration script to use if the prede-
     fined lease is used.

      ssssccccrrrriiiipppptttt """"_s_c_r_i_p_t-_n_a_m_e"""";;;;

     The ssssccccrrrriiiipppptttt statement is used to specify the pathname of  the
     dhcp  client  configuration  script.  This script is used by
     the dhcp client to set each interface's  initial  configura-
     tion  prior  to  requesting  an address, to test the address
     once it has been offered, and to set the  interface's  final
     configuration  once a lease has been acquired.   If no lease
     is acquired, the script is used to test  predefined  leases,
     if  any, and also called once if no valid lease can be iden-
     tified.   For more information, see ddddhhhhcccclllliiiieeeennnntttt----lllleeeeaaaasssseeee((((8888))))....

      mmmmeeeeddddiiiiuuuummmm """"_m_e_d_i_a _s_e_t_u_p"""";;;;

     The mmmmeeeeddddiiiiuuuummmm statement can be used on  systems  where  network
     interfaces  cannot  automatically determine the type of net-
     work to which they are connected.  The media setup string is
     a  system-dependent  parameter  which  is passed to the dhcp
     client configuration script when initializing the interface.
     On Unix and Unix-like systems, the argument is passed on the
     ifconfig command line when configuring te interface.

     The dhcp client automatically declares this parameter if  it
     used a media type (see the mmmmeeeeddddiiiiaaaa statement) when configuring
     the interface in order to obtain a  lease.   This  statement



SunOS 5.6                 Last change:                          6






Headers, Environments, and Macros                dhclient.conf(5)



     should  be  used  in  predefined  leases only if the network
     interface requires media type configuration.

      rrrreeeennnneeeewwww _d_a_t_e;;;;

      rrrreeeebbbbiiiinnnndddd _d_a_t_e;;;;

      eeeexxxxppppiiiirrrreeee _d_a_t_e;;;;

     The rrrreeeennnneeeewwww statement defines  the  time  at  which  the  dhcp
     client  should begin trying to contact its server to renew a
     lease that it is using.   The rrrreeeebbbbiiiinnnndddd statement  defines  the
     time at which the dhcp client should begin to try to contact
     _a_n_y dhcp server in order to renew its  lease.    The  eeeexxxxppppiiiirrrreeee
     statement  defines  the  time  at which the dhcp client must
     stop using a lease if it has not  been  able  to  contact  a
     server in order to renew it.

     These declarations are automatically set in leases  acquired
     by  the  DHCP  client, but must also be configured in prede-
     fined leases - a predefined  lease  whose  expiry  time  has
     passed will not be used by the DHCP client.

     Dates are specified as follows:

      <_w_e_e_k_d_a_y> <_y_e_a_r>////<_m_o_n_t_h>////<_d_a_y> <_h_o_u_r>::::<_m_i_n_u_t_e>::::<_s_e_c_o_n_d>

     The weekday is present to make it easy for a human  to  tell
     when  a lease expires - it's specified as a number from zero
     to six, with zero being Sunday.  When declaring a predefined
     lease,  it  can  always  be  specified as zero.  The year is
     specified with the century, so it should generally  be  four
     digits  except  for really long leases.  The month is speci-
     fied as a number starting with 1 for January.   The  day  of
     the  month  is likewise specified starting with 1.  The hour
     is a number between 0 and 23, the minute a number between  0
     and 59, and the second also a number between 0 and 59.

AAAALLLLIIIIAAAASSSS DDDDEEEECCCCLLLLAAAARRRRAAAATTTTIIIIOOOONNNNSSSS
      aaaalllliiiiaaaassss {{{{  _d_e_c_l_a_r_a_t_i_o_n_s ... }}}}

     Some DHCP  clients  running  TCP/IP  roaming  protocols  may
     require  that  in addition to the lease they may acquire via
     DHCP, their interface also be configured with  a  predefined
     IP  alias  so that they can have a permanent IP address even
     while  roaming.    The  Internet  Software  Consortium  DHCP
     client   doesn't   support   roaming  with  fixed  addresses
     directly, but in order to facilitate  such  experimentation,
     the dhcp client can be set up to configure an IP alias using
     the aaaalllliiiiaaaassss declaration.





SunOS 5.6                 Last change:                          7






Headers, Environments, and Macros                dhclient.conf(5)



     The alias declaration resembles a lease declaration,  except
     that  options  other than the subnet-mask option are ignored
     by the standard  client  configuration  script,  and  expiry
     times  are ignored.  A typical alias declaration includes an
     interface declaration, a fixed-address declaration  for  the
     IP  alias address, and a subnet-mask option declaration.   A
     medium statement  should  never  be  included  in  an  alias
     declaration.

OOOOTTTTHHHHEEEERRRR DDDDEEEECCCCLLLLAAAARRRRAAAATTTTIIIIOOOONNNNSSSS
      rrrreeeejjjjeeeecccctttt _i_p-_a_d_d_r_e_s_s;;;;

     The reject statement causes the DHCP client to reject offers
     from servers who use the specified address as a server iden-
     tifier.   This can be used  to  avoid  being  configured  by
     rogue or misconfigured dhcp servers, although it should be a
     last resort - better to track down the bad DHCP  server  and
     fix it.

      iiiinnnntttteeeerrrrffffaaaacccceeee """"_n_a_m_e"""" {{{{ _d_e_c_l_a_r_a_t_i_o_n_s ...  }}}}

     A client with more than one network  interface  may  require
     different  behaviour  depending  on which interface is being
     configured.   All timing parameters and  declarations  other
     than  lease  and  alias  declarations  can be enclosed in an
     interface declaration, and those  parameters  will  then  be
     used only for the interface that matches the specified name.
     Interfaces for which there is no interface declaration  will
     use   the  parameters  declared  outside  of  any  interface
     declaration, or the default settings.

      mmmmeeeeddddiiiiaaaa """"_m_e_d_i_a _s_e_t_u_p"""" [ ,,,, """"_m_e_d_i_a _s_e_t_u_p"""",,,, ... ];;;;

     The mmmmeeeeddddiiiiaaaa statement defines one or more media  configuration
     parameters which may be tried while attempting to acquire an
     IP address.   The dhcp client will cycle through each  media
     setup  string  on  the list, configuring the interface using
     that setup and attempting to boot, and then trying the  next
     one.    This can be used for network interfaces which aren't
     capable of sensing the media type unaided - whichever  media
     type succeeds in getting a request to the server and hearing
     the reply is probably right (no guarantees).

     The media setup is  only  used  for  the  initial  phase  of
     address   acquisition   (the   DHCPDISCOVER   and  DHCPOFFER
     packtes).   Once an address  has  been  acquired,  the  dhcp
     client  will record it in its lease database and will record
     the media type used to acquire the  address.   Whenever  the
     client tries to renew the lease, it will use that same media
     type.   The lease must expire before the client will go back
     to cycling through media types.




SunOS 5.6                 Last change:                          8






Headers, Environments, and Macros                dhclient.conf(5)



SSSSAAAAMMMMPPPPLLLLEEEE
     The following configuration file is used on a laptop running
     NetBSD 1.3.   The laptop has an IP alias of 192.5.5.213, and
     has one interface, ep0 (a 3com 3C589C).   Booting  intervals
     have  been  shortened somewhat from the default, because the
     client is known to spend most of its time on  networks  with
     little  DHCP  activity.    The  laptop does roam to multiple
     networks.


     timeout 60;
     retry 60;
     reboot 10;
     select-timeout 5;
     initial-interval 2;
     reject 192.33.137.209;

     interface "ep0" {
         send host-name "andare.fugue.com";
         send dhcp-client-identifier 1:0:a0:24:ab:fb:9c;
         send dhcp-lease-time 3600;
         supersede domain-name "fugue.com rc.vix.com home.vix.com";
         prepend domain-name-servers 127.0.0.1;
         request subnet-mask, broadcast-address, time-offset, routers,
              domain-name, domain-name-servers, host-name;
         require subnet-mask, domain-name-servers;
         script "/etc/dhclient-script";
         media "media 10baseT/UTP", "media 10base2/BNC";
     }

     alias {
       interface "ep0";
       fixed-address 192.5.5.213;
       option subnet-mask 255.255.255.255;
     }
     This is a very complicated dhclient.conf file - in  general,
     yours  should  be much simpler.   In many cases, it's suffi-
     cient to just create  an  empty  dhclient.conf  file  -  the
     defaults are usually fine.

SSSSEEEEEEEE AAAALLLLSSSSOOOO
     dhcp-options(5),        dhclient.leases(5),        dhcpd(8),
     dhcpd.conf(5), RFC2132, RFC2131.

AAAAUUUUTTTTHHHHOOOORRRR
     ddddhhhhcccclllliiiieeeennnntttt((((8888)))) was written by Ted Lemon <mellon@vix.com>  under
     a  contract  with Vixie Labs.   Funding for this project was
     provided by the Internet Software  Consortium.   Information
     about  the  Internet  Software  Consortium  can  be found at
     hhhhttttttttpppp::::////////wwwwwwwwwwww....iiiisssscccc....oooorrrrgggg////iiiisssscccc....





SunOS 5.6                 Last change:                          9



