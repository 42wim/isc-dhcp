/**
@page tests Testing

@section testsOverview Testing Overview

@section testsAtf ATF unit-tests

ATF stands for Automated Test Framework, and is the framework used for unit
tests in ISC DHCP and BIND9. ATF sources can be downloaded from
http://code.google.com/p/kyua/wiki/ATF . ATF itself must be configured, compiled
and then installed to be available during the DHCP configure procedure.  Please
follow INSTALL file supplied with ATF sources (it's essentially the typical
./configure && make && make install procedure).

The ATF successor, called Kyua, is being developed. As of August 2012, the
latest available release of Kyua is 0.5. It claims to offer feature parity with
ATF. Migration to Kyua may be planned some time in the future, but DHCP uses ATF
for now. Such an upgrade should be done in coordination with BIND. The latest
tested version of ATF that DHCP's unittests were run against is 0.15.

To build the unit-tests, use the following:

@verbatim
./configure --with-atf
make
make check
@endverbatim

The following syntax is supported as well:
@verbatim
./configure --with-atf=/path/to/your/atf/install
@endverbatim

but it seems to have troubles detecting ATF installation, at least
with ATF 0.14 and Mac OS X 10.6.8.

Each code directory (e.g. server/) that has unit-tests has a sub-directory
named tests (e.g. server/tests). You can execute "make check" in that
directory to run specific subset of tests.

Unit-tests are grouped into suites, each suite being a separate
executable. The typical way to run tests is:

@verbatim
atf-run | atf-report
@endverbatim

atf-run will read the Atffile in the current directory and execute
all the tests specified in it. Using atf-run - rather than calling the
test binary directly - has several major benefits. The main one is that
atf-run is able to recover from test segfault and continue execution
from the next case onwards.

It is possible to run atf-run without passing its output to atf-report,
but its output is somewhat convoluted. That is useful in some situations,
e.g. when one wants to see test output.

It is possible to run test binary directly. The only required parameter
is the test case name. The binary will print out a warning that direct
binary execution is not recommended as it won't be able to recover
from crash.  However, such an approach is convenient for running the
test under the debugger.

@section testsAtfAdding Adding new unit-tests

There are a small number of unit-tests that are not ATF based. They will
be converted to ATF soon. Please do not use any other frameworks.

Sadly, the DHCP code was not written with unit-testing in mind: often a
non-standard approach is required for writing unit-tests. The existing
code often has many dependencies that make testing a single piece of code
awkward to unit test.  For example, to test hash tables, one needs to
also include the OMAPI code. Rather than significantly refactoring the
code (a huge task that could take months), we decided to link whatever
is needed in the tests. If developing new test suite, it is recommended
that you take a look at existing tests and just copy them.  In particular,
the following things should be done for adding new tests:

1. Create new file that will hold test code. It is recommended you
name it (tested_feature_name)_unittest.c and put the file in specified
tests directory.  For example tests related to hash tables used on the
server side should be named server/tests/hash_unittest.c. If in doubt,
it is convenient to name the test code after the file that holds tested
code, e.g. server/mdb6.c is tested in server/tests/mdb6_unittest.c.

2. Implement the test. The file server/tests/simple_unittest.c holds a
template explaining the basic layout of the ATF tests.  There may be many
test cases in a single *_unittest.c file. Make sure that you register
all your test cases using ATF_TP_ADD_TC() macro, and try to minimize
modifications to the tested code if possible. Keep in mind that we are
using modernized \ref codingGuidelines for test development. You are
advised to also look at atf-c-api(3).

3. Extend Makefile.am to build your test. In particular, add your binary
name to ATF_TESTS. The tests directory will be built only in case where
ATF is enabled, using --enable-atf during configure phase.

4. Modify Atffile to include your new test binary, if needed. If you
followed naming convention proposed in step 2, your test will be included
and will be included automatically.

5. Enjoy your improved confidence in the code, as you can run the tests after
any change you may want to do:

@verbatim
make check
atf-run | atf-report
@endverbatim

@section testsAtfCoding ATF Coding Guidelines

As the unit-test code creates an evironment that works under a different
regime than the production code, there are slight differences to standard
coding guidelines. In particular:

- The code is written using C99. Double slash comments are allowed.
- Please do not use tabs. Use 4 spaces for each indent level.

*/
