


dhcpd.conf(5)                                       dhcpd.conf(5)


NNAAMMEE
       dhcpd.conf - dhcpd configuration file

DDEESSCCRRIIPPTTIIOONN
       The dhcpd.conf file contains configuration information for
       _d_h_c_p_d_, the Internet Software Consortium DHCP Server.

       The dhcpd.conf file is a free-form ASCII text  file.    It
       is  parsed  by  the  recursive-descent  parser  built into
       dhcpd.   The file may contain extra tabs and newlines  for
       formatting  purposes.   Keywords  in  the  file  are case-
       insensitive.   Comments may be placed anywhere within  the
       file  (except  within quotes).   Comments begin with the #
       character and end at the end of the line.

       The file essentially consists of  a  list  of  statements.
       Statements fall into two broad categories - parameters and
       declarations.

       Parameter statements either say how to do something (e.g.,
       how long a lease to offer), whether to do something (e.g.,
       should dhcpd provide addresses  to  unknown  clients),  or
       what  parameters to provide to the client (e.g., use gate-
       way 220.177.244.7).

       Declarations are used to describe the topology of the net-
       work,  to  describe  clients  on  the  network, to provide
       addresses that can be assigned to clients, or to  apply  a
       group  of  parameters to a group of declarations.   In any
       group of parameters and declarations, all parameters  must
       be specified before any declarations which depend on those
       parameters may be specified.

       Declarations about network topology  include  the  _s_e_r_v_e_r_-
       _i_d_e_n_t_i_f_i_e_r,  the  _s_h_a_r_e_d_-_n_e_t_w_o_r_k  and  the _s_u_b_n_e_t declara-
       tions.   If  clients  on  a  subnet  are  to  be  assigned
       addresses  dynamically,  a  _r_a_n_g_e  declaration must appear
       within the _s_u_b_n_e_t declaration.   For clients  with  stati-
       cally  assigned addresses, or for installations where only
       known clients will be served, each such client must have a
       _h_o_s_t  declaration.    If parameters are to be applied to a
       group of declarations which are not related strictly on  a
       per-subnet basis, the _g_r_o_u_p declaration can be used.

       Each  dhcpd.conf file must have one (and only one) _s_e_r_v_e_r_-
       _i_d_e_n_t_i_f_i_e_r declaration, which tells dhcpd  the  identifier
       to  use when issuing leases.   For every subnet which will
       be served, there must be  one  _s_u_b_n_e_t  declaration,  which
       tells  dhcpd  how  to recognize that an address is on that
       subnet.   A _s_u_b_n_e_t declaration is required for each subnet
       even if no addresses will be dynamically allocated on that
       subnet.

       Some installations have physical networks  on  which  more



                                                                1





dhcpd.conf(5)                                       dhcpd.conf(5)


       than  one IP subnet operates.   For example, if there is a
       site-wide requirement that 8-bit subnet masks be used, but
       a  department  with  a  single  physical  ethernet network
       expands to the point where it has more than 254 nodes,  it
       may be necessary to run two 8-bit subnets on the same eth-
       ernet until such time as a new  physical  network  can  be
       added.    In  this case, the _s_u_b_n_e_t declarations for these
       two networks may be enclosed in a _s_h_a_r_e_d_-_n_e_t_w_o_r_k  declara-
       tion.

       Some sites may have departments which have clients on more
       than one subnet, but it may be desirable  to  offer  those
       clients  a  uniform  set of parameters which are different
       than what would be offered to clients from  other  depart-
       ments  on  the  same  subnet.    For clients which will be
       declared explicitly with _h_o_s_t declarations, these declara-
       tions  can  be  enclosed in a _g_r_o_u_p declaration along with
       the parameters which are common to that department.    For
       clients  whose  addresses  will  be  dynamically assigned,
       there is currently no way to group  parameter  assignments
       other than by network topology.

       When  a  client  is  to be booted, its boot parameters are
       determined by first consulting that client's _h_o_s_t declara-
       tion  (if  any), then consulting the _g_r_o_u_p declaration (if
       any) which enclosed that _h_o_s_t declaration, then consulting
       the  _s_u_b_n_e_t declaration for the subnet on which the client
       is booting, then consulting the _s_h_a_r_e_d_-_n_e_t_w_o_r_k declaration
       (if  any)  containing  that subnet, and finally consulting
       the top-level parameters which may be specified outside of
       any declaration.

       When  dhcpd tries to find a _h_o_s_t declaration for a client,
       it first looks for a _h_o_s_t declaration which has  a  _f_i_x_e_d_-
       _a_d_d_r_e_s_s  parameter which matches the subnet or shared net-
       work on which the client is booting.   If it doesn't  find
       any  such  entry, it then tries to find an entry which has
       no _f_i_x_e_d_-_a_d_d_r_e_s_s parameter.   If no such entry  is  found,
       then  dhcpd acts as if there is no entry in the dhcpd.conf
       file for that client, even if there is an entry  for  that
       client on a different subnet or shared network.

EEXXAAMMPPLLEESS
       A typical dhcpd.conf file will look something like this:

       server-identifier dhcps.isc.org;
       _g_l_o_b_a_l _p_a_r_a_m_e_t_e_r_s_._._.

       shared-network ISC-BIGGIE {
         _s_h_a_r_e_d_-_n_e_t_w_o_r_k_-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s_._._.
         subnet 204.254.239.0 netmask 255.255.255.224 {
           _s_u_b_n_e_t_-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s_._._.
           range 204.254.239.10 204.254.239.30;
         }



                                                                2





dhcpd.conf(5)                                       dhcpd.conf(5)


         subnet 204.254.239.32 netmask 255.255.255.224 {
           _s_u_b_n_e_t_-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s_._._.
           range 204.254.239.42 204.254.239.62;
         }
       }

       subnet 204.254.239.64 netmask 255.255.255.224 {
         _s_u_b_n_e_t_-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s_._._.
         range 204.254.239.74 204.254.239.94;
       }

       group {
         _g_r_o_u_p_-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s_._._.
         host zappo.test.isc.org {
           _h_o_s_t_-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s_._._.
         }
         host beppo.test.isc.org {
           _h_o_s_t_-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s_._._.
         }
         host harpo.test.isc.org {
           _h_o_s_t_-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s_._._.
         }
       }

                                Figure 1


       Notice   that  after  the  server-identifier  declaration,
       there's a place for global parameters.    These  might  be
       things  like the organization's domain name, the addresses
       of the name servers (if they  are  common  to  the  entire
       organization), and so on.   So, for example:

            option domain-name "isc.org";
            option name-servers ns1.isc.org, ns2.isc.org;

                                Figure 2

       As  you  can  see  in Figure 2, it's legal to specify host
       addresses in parameters as domain  names  rather  than  as
       numeric  IP  addresses.   If  a given hostname resolves to
       more than one IP address (for example, if  that  host  has
       two  ethernet  interfaces), both addresses are supplied to
       the client.

       In Figure 1, you can  see  that  both  the  shared-network
       statement  and  the subnet statements can have parameters.
       Let us say that the shared network _I_S_C_-_B_I_G_G_I_E supports  an
       entire  department  -  perhaps  the accounting department.
       If accounting has its own domain, then  a  shared-network-
       specific parameter might be:

            option domain-name "accounting.isc.org";




                                                                3





dhcpd.conf(5)                                       dhcpd.conf(5)


       All  subnet  declarations  appearing in the shared-network
       declaration would then have the domain-name option set  to
       "accounting.isc.org" instead of just "isc.org".

       The most obvious reason for having subnet-specific parame-
       ters as shown in Figure 1 is that each subnet,  of  neces-
       sity,  has  its own router.   So for the first subnet, for
       example, there should be something like:

            option routers 204.254.239.1;

       Note that  the  address  here  is  specified  numerically.
       This is not required - if you have a different domain name
       for each interface on your router, it's perfectly  legiti-
       mate  to use the domain name for that interface instead of
       the numeric address.   However, in many cases there may be
       only  one  domain name for all of a router's IP addresses,
       and it would not be appropriate to use that name here.

       In Figure 1 there is also a _g_r_o_u_p  statement,  which  pro-
       vides  common parameters for a set of three hosts - zappo,
       beppo and harpo.  As you can see, these hosts are  all  in
       the  test.isc.org  domain,  so  it  might make sense for a
       group-specific parameter to override the domain name  sup-
       plied to these hosts:

            option domain-name "test.isc.org";

       Also, given the domain they're in, these are probably test
       machines.  If we wanted to test the  DHCP  leasing  mecha-
       nism, we might set the lease timeout somewhat shorter than
       the default:

            max-lease-time 120;
            default-lease-time 120;

       You may have noticed that while some parameters start with
       the  _o_p_t_i_o_n  keyword,  some  do not.   Parameters starting
       with the _o_p_t_i_o_n keyword correspond to actual DHCP options,
       while parameters that do not start with the option keyword
       either control the behaviour of the DHCP server (e.g., how
       long  a  lease  dhcpd  will  give  out), or specify client
       parameters that are not optional in the DHCP protocol (for
       example, server-name and filename).

       In  Figure  1,  each  host  had  _h_o_s_t_-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s.
       These could include such things as  the  _h_o_s_t_n_a_m_e  option,
       the  name of a file to upload (the _f_i_l_e_n_a_m_e _p_a_r_a_m_e_t_e_r_) _a_n_d
       _t_h_e _a_d_d_r_e_s_s _o_f _t_h_e _s_e_r_v_e_r _f_r_o_m _w_h_i_c_h _t_o  _u_p_l_o_a_d  _t_h_e  _f_i_l_e
       _(_t_h_e  _n_e_x_t_-_s_e_r_v_e_r  parameter).   In general, any parameter
       can appear anywhere that parameters are allowed, and  will
       be  applied  according to the scope in which the parameter
       appears.




                                                                4





dhcpd.conf(5)                                       dhcpd.conf(5)


       Imagine that you  have  a  site  with  a  lot  of  NCD  X-
       Terminals.    These terminals come in a variety of models,
       and you want to specify the boot files  for  each  models.
       One  way to do this would be to have host declarations for
       each server and group them by model:

       group {
         filename "Xncd19r";
         next-server ncd-booter;

         host ncd1 { hardware ethernet 0:c0:c3:49:2b:57; }
         host ncd4 { hardware ethernet 0:c0:c3:80:fc:32; }
         host ncd8 { hardware ethernet 0:c0:c3:22:46:81; }
       }

       group {
         filename "Xncd19c";
         next-server ncd-booter;

         host ncd2 { hardware ethernet 0:c0:c3:88:2d:81; }
         host ncd3 { hardware ethernet 0:c0:c3:00:14:11; }
       }

       group {
         filename "XncdHMX";
         next-server ncd-booter;

         host ncd1 { hardware ethernet 0:c0:c3:11:90:23; }
         host ncd4 { hardware ethernet 0:c0:c3:91:a7:8; }
         host ncd8 { hardware ethernet 0:c0:c3:cc:a:8f; }
       }

RREEFFEERREENNCCEE:: DDEECCLLAARRAATTIIOONNSS
       TThhee _s_e_r_v_e_r_-_i_d_e_n_t_i_f_i_e_r ssttaatteemmeenntt

        sseerrvveerr--iiddeennttiiffiieerr _h_o_s_t_n_a_m_e;;

       The server-identifier declaration  must  be  used  exactly
       once in each dhcpd.conf file to tell dhcpd what IP address
       to use as its server identifier, as required by  the  DHCP
       protocol.    On  a  machine  with  a single interface, the
       server identifier should be the primary  address  of  that
       interface.    On  machines  with  multiple interfaces, the
       address of  one  such  interface  must  be  chosen.    Any
       address may be chosen, as long as it is the address of one
       of the interfaces of that machine.

       TThhee _s_h_a_r_e_d_-_n_e_t_w_o_r_k ssttaatteemmeenntt

        sshhaarreedd--nneettwwoorrkk _n_a_m_e {{
          [ _p_a_r_a_m_e_t_e_r_s ]
          [ _d_e_c_l_a_r_a_t_i_o_n_s ]
        }}




                                                                5





dhcpd.conf(5)                                       dhcpd.conf(5)


       The _s_h_a_r_e_d_-_n_e_t_w_o_r_k statement is used to  inform  the  DHCP
       server that some IP subnets actually share the same physi-
       cal network.  Any subnets in a shared  network  should  be
       declared  within  a  _s_h_a_r_e_d_-_n_e_t_w_o_r_k statement.  Parameters
       specified in the _s_h_a_r_e_d_-_n_e_t_w_o_r_k  statement  will  be  used
       when  booting  clients  on those subnets unless parameters
       provided at the subnet or host level  override  them.   If
       any subnet in a shared network has addresses available for
       dynamic allocation, those addresses are collected  into  a
       common  pool  for  that  shared  network  and  assigned to
       clients as needed.  There is  no  way  to  distinguish  on
       which subnet of a shared network a client should boot.

       _N_a_m_e should be the name of the shared network.   This name
       is used when printing debugging messages, so it should  be
       descriptive  for  the  shared network.   The name may have
       the syntax of a valid domain name (although it will  never
       be  used  as  such),  or  it  may  be  any arbitrary name,
       enclosed in quotes.

       TThhee _s_u_b_n_e_t ssttaatteemmeenntt

        ssuubbnneett _s_u_b_n_e_t_-_n_u_m_b_e_r nneettmmaasskk _n_e_t_m_a_s_k {{
          [ _p_a_r_a_m_e_t_e_r_s ]
          [ _d_e_c_l_a_r_a_t_i_o_n_s ]
        }}

       The _s_u_b_n_e_t statement is used to provide dhcpd with  enough
       information  to  tell  whether  or not an IP address is on
       that subnet.  It may  also  be  used  to  provide  subnet-
       specific  parameters  and to specify what addresses may be
       dynamically allocated to clients booting on  that  subnet.
       Such  addresses are specified using the _r_a_n_g_e declaration.

       The _s_u_b_n_e_t_-_n_u_m_b_e_r should be an IP address or  domain  name
       which  resolves  to  the subnet number of the subnet being
       described.   The _n_e_t_m_a_s_k should be an IP address or domain
       name which resolves to the subnet mask of the subnet being
       described.   The subnet number, together with the netmask,
       are  sufficient  to determine whether any given IP address
       is on the specified subnet.

       TThhee _r_a_n_g_e ssttaatteemmeenntt

        rraannggee [ ddyynnaammiicc--bboooottpp ] _l_o_w_-_a_d_d_r_e_s_s [ _h_i_g_h_-_a_d_d_r_e_s_s];;

       For any subnet on which addresses will be assigned dynami-
       cally,  there  must be at least one _r_a_n_g_e statement.   The
       range statement gives the lowest and highest IP  addresses
       in  a  range.   All IP addresses in the range should be in
       the subnet in which the _r_a_n_g_e statement is declared.   The
       _d_y_n_a_m_i_c_-_b_o_o_t_p  flag  may  be specified if addresses in the
       specified range  may  be  dynamically  assigned  to  BOOTP
       clients  as  well  as  DHCP  clients.    When specifying a



                                                                6





dhcpd.conf(5)                                       dhcpd.conf(5)


       single address, _h_i_g_h_-_a_d_d_r_e_s_s can be omitted.

       TThhee _h_o_s_t ssttaatteemmeenntt

        hhoosstt _h_o_s_t_n_a_m_e {
          [ _p_a_r_a_m_e_t_e_r_s ]
          [ _d_e_c_l_a_r_a_t_i_o_n_s ]
        }}

       There must be at least one hhoosstt statement for every  BOOTP
       client  that is to be served.  hhoosstt statements may also be
       specified for DHCP clients, although this is not  required
       unless booting is only enabled for known hosts.

       If  it  is  desirable  to  be able to boot a DHCP or BOOTP
       client on more than one subnet with fixed addresses,  more
       than  one  address  may  be specified in the _f_i_x_e_d_-_a_d_d_r_e_s_s
       parameter, or more than one hhoosstt statement may  be  speci-
       fied.

       If  client-specific  boot  parameters must change based on
       the network to which the client is attached, then multiple
       hhoosstt statements should be used.

       If  a client is to be booted using a fixed address if it's
       possible, but should be allocated a dynamic address other-
       wise,  then  a  hhoosstt statement must be specified without a
       ffiixxeedd--aaddddrreessss clause.  _h_o_s_t_n_a_m_e should be a name identify-
       ing  the  host.  If a _h_o_s_t_n_a_m_e option is not specified for
       the host, _h_o_s_t_n_a_m_e is used.

       _H_o_s_t declarations are matched  to  actual  DHCP  or  BOOTP
       clients  by  matching  the  dhcp-client-identifier  option
       specified in the _h_o_s_t declaration to the one  supplied  by
       the client, or, if the _h_o_s_t declaration or the client does
       not provide a dhcp-client-identifier option,  by  matching
       the _h_a_r_d_w_a_r_e parameter in the _h_o_s_t declaration to the net-
       work hardware address  supplied  by  the  client.    BOOTP
       clients  do not normally provide a _d_h_c_p_-_c_l_i_e_n_t_-_i_d_e_n_t_i_f_i_e_r,
       so the hardware address must be used for all clients  that
       may boot using the BOOTP protocol.

       TThhee _g_r_o_u_p ssttaatteemmeenntt

        ggrroouupp {
          [ _p_a_r_a_m_e_t_e_r_s ]
          [ _d_e_c_l_a_r_a_t_i_o_n_s ]
        }}

       The  group  statement  is used simply to apply one or more
       parameters to a group of declarations.   It can be used to
       group  hosts,  shared  networks,  subnets,  or  even other
       groups.




                                                                7





dhcpd.conf(5)                                       dhcpd.conf(5)


RREEFFEERREENNCCEE:: PPAARRAAMMEETTEERRSS
       TThhee _d_e_f_a_u_l_t_-_l_e_a_s_e_-_t_i_m_e ssttaatteemmeenntt

        ddeeffaauulltt--lleeaassee--ttiimmee _t_i_m_e;;

       _T_i_m_e should be the length in seconds that will be assigned
       to a lease if the client requesting the lease does not ask
       for a specific expiration time.

       TThhee _m_a_x_-_l_e_a_s_e_-_t_i_m_e ssttaatteemmeenntt

        mmaaxx--lleeaassee--ttiimmee _t_i_m_e;;

       _T_i_m_e should be the maximum length in seconds that will  be
       assigned  to  a  lease  if the client requesting the lease
       asks for a specific expiration time.

       TThhee _h_a_r_d_w_a_r_e ssttaatteemmeenntt

        hhaarrddwwaarree _h_a_r_d_w_a_r_e_-_t_y_p_e _h_a_r_d_w_a_r_e_-_a_d_d_r_e_s_s;;

       In order for a BOOTP client to be recognized, its  network
       hardware  address must be declared using a _h_a_r_d_w_a_r_e clause
       in the _h_o_s_t statement.  _h_a_r_d_w_a_r_e_-_t_y_p_e must be the name  of
       a  physical hardware interface type.   Currently, only the
       eetthheerrnneett type is recognized, although support  for  ttookkeenn--
       rriinngg and ffddddii hardware types would also be desirable.  The
       _h_a_r_d_w_a_r_e_-_a_d_d_r_e_s_s should be a  set  of  hexadecimal  octets
       (numbers  from  0  through  ff) seperated by colons.   The
       _h_a_r_d_w_a_r_e_f_R _s_t_a_t_e_m_e_n_t _m_a_y _a_l_s_o _b_e _u_s_e_d _f_o_r _D_H_C_P _c_l_i_e_n_t_s_.

       TThhee _f_i_l_e_n_a_m_e ssttaatteemmeenntt

        ffiilleennaammee ""_f_i_l_e_n_a_m_e"";;

       The _f_i_l_e_n_a_m_e statement can be used to specify the name  of
       the  initial  boot file which is to be loaded by a client.
       The _f_i_l_e_n_a_m_e should be a filename recognizable to whatever
       file  transfer  protocol the client can be expected to use
       to load the file.

       TThhee _s_e_r_v_e_r_-_n_a_m_e ssttaatteemmeenntt

        sseerrvveerr--nnaammee ""_n_a_m_e"";;

       The _s_e_r_v_e_r_-_n_a_m_e statement can be used to inform the client
       of the name of the server from which it is booting.   _N_a_m_e
       should be the name that will be provided to the client.

       TThhee _n_e_x_t_-_s_e_r_v_e_r ssttaatteemmeenntt

        nneexxtt--sseerrvveerr _s_e_r_v_e_r_-_n_a_m_e;;

       The _n_e_x_t_-_s_e_r_v_e_r statement is  used  to  specify  the  host



                                                                8





dhcpd.conf(5)                                       dhcpd.conf(5)


       address  of  the  server  from which the initial boot file
       (specified in the _f_i_l_e_n_a_m_e statement)  is  to  be  loaded.
       _S_e_r_v_e_r_-_n_a_m_e  should  be  a  numeric IP address or a domain
       name.   If no _n_e_x_t_-_s_e_r_v_e_r parameter  applies  to  a  given
       client,  the  address  specified  in the _s_e_r_v_e_r_-_i_d_e_n_t_i_f_i_e_r
       statement is used.

       TThhee _f_i_x_e_d_-_a_d_d_r_e_s_s ssttaatteemmeenntt

        ffiixxeedd--aaddddrreessss _a_d_d_r_e_s_s [,, _a_d_d_r_e_s_s ... ];;

       The _f_i_x_e_d_-_a_d_d_r_e_s_s statement is used to assign one or  more
       fixed  IP addresses to a client.  It should only appear in
       a _h_o_s_t declaration.  If more than one address is supplied,
       then  when  the  client  boots,  it  will  be assigned the
       address which corresponds to the network on  which  it  is
       booting.   If  none  of the addresses in the _f_i_x_e_d_-_a_d_d_r_e_s_s
       statement are on the network on which the client is  boot-
       ing,  that client will not match the _h_o_s_t declaration con-
       taining that _f_i_x_e_d_-_a_d_d_r_e_s_s statement.  Each _a_d_d_r_e_s_s should
       be either an IP address or a domain name which resolves to
       one or more IP addresses.

       TThhee _d_y_n_a_m_i_c_-_b_o_o_t_p_-_l_e_a_s_e_-_c_u_t_o_f_f ssttaatteemmeenntt

        ddyynnaammiicc--bboooottpp--lleeaassee--ccuuttooffff _d_a_t_e;;

       The _d_y_n_a_m_i_c_-_b_o_o_t_p_-_l_e_a_s_e_-_c_u_t_o_f_f statement sets  the  ending
       time for all leases assigned dynamically to BOOTP clients.
       Because BOOTP clients do not  have  any  way  of  renewing
       leases,  and don't know that their leases could expire, by
       default  dhcpd  assignes  infinite  leases  to  all  BOOTP
       clients.  However, it may make sense in some situations to
       set a cutoff date for all BOOTP leases - for example,  the
       end of a school term, or the time at night when a facility
       is closed and all machines are required to be powered off.

       _D_a_t_e should be the date on which all assigned BOOTP leases
       will end.  The date is specified in the form:

                         W YYYY/MM/DD HH:MM:SS

       W is the day of the week expressed as a number  from  zero
       (Sunday)  to  six (Saturday).  YYYY is the year, including
       the century.  MM is the month expressed as a number from 1
       to  12.   DD is the day of the month, counting from 1.  HH
       is the hour, from zero to 23.  MM is the minute and SS  is
       the  second.   The  time  is always in Greenwich Mean Time
       (GMT), not local time.

       TThhee _d_y_n_a_m_i_c_-_b_o_o_t_p_-_l_e_a_s_e_-_l_e_n_g_t_h ssttaatteemmeenntt

        ddyynnaammiicc--bboooottpp--lleeaassee--lleennggtthh _l_e_n_g_t_h;;




                                                                9





dhcpd.conf(5)                                       dhcpd.conf(5)


       The _d_y_n_a_m_i_c_-_b_o_o_t_p_-_l_e_a_s_e_-_l_e_n_g_t_h statement is  used  to  set
       the   length  of  leases  dynamically  assigned  to  BOOTP
       clients.   At some sites, it may  be  possible  to  assume
       that  a  lease  is  no longer in use if its holder has not
       used BOOTP or DHCP to get its  address  within  a  certain
       time period.   The period is specified in _l_e_n_g_t_h as a num-
       ber of seconds.   If a client reboots using  BOOTP  during
       the timeout period, the lease duration is reset to _l_e_n_g_t_h,
       so a BOOTP client that boots frequently enough will  never
       lose its lease.  Needless to say, this parameter should be
       adjusted with extreme caution.

       TThhee _b_o_o_t_-_u_n_k_n_o_w_n_-_c_l_i_e_n_t_s ssttaatteemmeenntt

        bboooott--uunnkknnoowwnn--cclliieennttss _f_l_a_g;;

       The _b_o_o_t_-_u_n_k_n_o_w_n_-_c_l_i_e_n_t_s statement is used to  tell  dhcpd
       whether  or not to dynamically assign addresses to unknown
       DHCP  clients.   If  _f_l_a_g  is  true  (the  default),  then
       addresses are dynamically assigned to unknown DHCP clients
       when available.  If _f_l_a_g is false, then addresses are pro-
       vided  only  to DHCP clients which match at least one host
       declaration.

       TThhee _g_e_t_-_l_e_a_s_e_-_h_o_s_t_n_a_m_e_s ssttaatteemmeenntt

        ggeett--lleeaassee--hhoossttnnaammeess _f_l_a_g;;

       The _g_e_t_-_l_e_a_s_e_-_h_o_s_t_n_a_m_e_s statement is used  to  tell  dhcpd
       whether or not to look up the domain name corresponding to
       the IP address of each address in the lease pool  and  use
       that  address  for  the  DHCP _h_o_s_t_n_a_m_e option.  If _f_l_a_g is
       true, then this lookup is done for all  addresses  in  the
       current  scope.    By  default,  or  if  _f_l_a_g is false, no
       lookups are done.

RREEFFEERREENNCCEE:: OOPPTTIIOONN SSTTAATTEEMMEENNTTSS
       DHCP _o_p_t_i_o_n statements always start with the  _o_p_t_i_o_n  key-
       word, followed by an option name, followed by option data.
       The option names and data  formats  are  described  below.
       It  is  not  necessary  to  exhaustively  specify all DHCP
       options - only those options which are needed  by  clients
       must be specified.

       Option  data  comes  in  a  variety of formats, as defined
       below:

       The iipp--aaddddrreessss data type  can  be  entered  either  as  an
       explicit  IP address (e.g., 239.254.197.10) or as a domain
       name (e.g., haagen.isc.org).  When entering a domain name,
       be  sure  that  that  domain  name resolves to a single IP
       address.

       The iinntt3322 data type specifies  a  signed  32-bit  integer.



                                                               10





dhcpd.conf(5)                                       dhcpd.conf(5)


       The uuiinntt3322 data type specifies an unsigned 32-bit integer.
       The  iinntt1166  and  uuiinntt1166  data  types  specify  signed  and
       unsigned  16-bit integers.   The iinntt88 and uuiinntt88 data types
       specify signed  and  unsigned  8-bit  integers.   Unsigned
       8-bit integers are also sometimes referred to as octets.

       The  ssttrriinngg data type specifies an NVT ASCII string, which
       must be enclosed in double quotes - for example, to  spec-
       ify a domain-name option, the syntax would be

            option domain-name "isc.org";

       The  ffllaagg  data type specifies a boolean value.   Booleans
       can be either true or false (or on or off, if  that  makes
       more sense to you).

       The  ddaattaa--ssttrriinngg  data  type specifies either an NVT ASCII
       string enclosed in double quotes, or a  series  of  octets
       specified in hexadecimal, seperated by colons.   For exam-
       ple:

            option client-identifier "CLIENT-FOO";
       or
            option client-identifier 43:4c:49:45:54:2d:46:4f:4f;

       The documentation for the various options mentioned  below
       is  taken  from  the  latest  IETF  draft document on DHCP
       options.

        ooppttiioonn ssuubbnneett--mmaasskk _i_p_-_a_d_d_r_e_s_s;;

       The subnet mask option specifies the client's subnet  mask
       as per RFC 950.

        ooppttiioonn ttiimmee--ooffffsseett _i_n_t_3_2;;

       The   time-offset  option  specifies  the  offset  of  the
       client's subnet in seconds from Coordinated Universal Time
       (UTC).

        ooppttiioonn rroouutteerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s ... ];;

       The  routers  option  specifies a list of IP addresses for
       routers on the client's subnet.  Routers should be  listed
       in order of preference.

        ooppttiioonn ttiimmee--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s _[_, _i_p_-_a_d_d_r_e_s_s ... ];;

       The  time-server  option  specifies a list of RFC 868 time
       servers available to the client.  Servers should be listed
       in order of preference.

        ooppttiioonn nnaammee--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s ... ];




                                                               11





dhcpd.conf(5)                                       dhcpd.conf(5)


       The  name-servers  option specifies a list of IEN 116 name
       servers available to the client.  Servers should be listed
       in order of preference.

        ooppttiioonn  ddoommaaiinn--nnaammee--sseerrvveerrss  _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s ...
       ];;

       The domain-name-servers option specifies a list of  Domain
       Name  System  (STD 13, RFC 1035) name servers available to
       the client.  Servers should be listed in order of  prefer-
       ence.

        ooppttiioonn lloogg--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s ... ];;

       The  log-server option specifies a list of MIT-LCS UDP log
       servers available to the client.  Servers should be listed
       in order of preference.

        ooppttiioonn ccooookkiiee--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s ... ];;

       The  cookie  server  option  specifies  a  list of RFC 865
       cookie servers available to the client.  Servers should be
       listed in order of preference.

        ooppttiioonn llpprr--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s  [,, _i_p_-_a_d_d_r_e_s_s ... ];;

       The  LPR  server  option specifies a list of RFC 1179 line
       printer servers available to the client.   Servers  should
       be listed in order of preference.

        ooppttiioonn iimmpprreessss--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s ... ];;

       The  impress-server  option  specifies  a  list  of Imagen
       Impress servers available to the client.   Servers  should
       be listed in order of preference.

        ooppttiioonn rreessoouurrccee--llooccaattiioonn--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s
       ... ];;

       This option specifies a list of RFC 887 Resource  Location
       servers available to the client.  Servers should be listed
       in order of preference.

        ooppttiioonn hhoosstt--nnaammee _s_t_r_i_n_g;;

       This option specifies the name of the  client.   The  name
       may or may not be qualified with the local domain name (it
       is preferable to use the domain-name option to specify the
       domain  name).   See  RFC  1035 for character set restric-
       tions.

        ooppttiioonn bboooott--ssiizzee _u_i_n_t_1_6;;

       This option specifies the length in  512-octet  blocks  of



                                                               12





dhcpd.conf(5)                                       dhcpd.conf(5)


       the default boot image for the client.

        ooppttiioonn mmeerriitt--dduummpp _s_t_r_i_n_g;;

       This option specifies the path-name of a file to which the
       client's core image should be  dumped  in  the  event  the
       client  crashes.   The  path  is  formatted as a character
       string consisting of characters from the NVT ASCII charac-
       ter set.

        ooppttiioonn ddoommaaiinn--nnaammee _s_t_r_i_n_g;;

       This  option  specifies the domain name that client should
       use when resolving hostnames via the Domain Name System.

        ooppttiioonn sswwaapp--sseerrvveerr _i_p_-_a_d_d_r_e_s_s;;

       This specifies the IP address of the client's swap server.

        ooppttiioonn rroooott--ppaatthh _s_t_r_i_n_g;;

       This  option  specifies  the  path-name  that contains the
       client's root disk.  The path is formatted as a  character
       string consisting of characters from the NVT ASCII charac-
       ter set.

        ooppttiioonn iipp--ffoorrwwaarrddiinngg _f_l_a_g;;

       This option specifies whether the client should  configure
       its  IP  layer  for packet forwarding.  A value of 0 means
       disable IP forwarding, and a value of 1  means  enable  IP
       forwarding.

        ooppttiioonn nnoonn--llooccaall--ssoouurrccee--rroouuttiinngg _f_l_a_g;;

       This  option specifies whether the client should configure
       its IP layer to allow forwarding of  datagrams  with  non-
       local  source  routes (see Section 3.3.5 of [4] for a dis-
       cussion of this topic).  A value of 0 means disallow  for-
       warding  of  such  datagrams, and a value of 1 means allow
       forwarding.

        ooppttiioonn ppoolliiccyy--ffiilltteerr _i_p_-_a_d_d_r_e_s_s _i_p_-_a_d_d_r_e_s_s [,,  _i_p_-_a_d_d_r_e_s_s
       _i_p_-_a_d_d_r_e_s_s ... ];;

       This  option specifies policy filters for non-local source
       routing.  The filters consist of a list  of  IP  addresses
       and  masks which specify destination/mask pairs with which
       to filter incoming source routes.

       Any source routed datagram whose next-hop address does not
       match  one  of  the  filters  should  be  discarded by the
       client.




                                                               13





dhcpd.conf(5)                                       dhcpd.conf(5)


       See STD 3 (RFC1122) for further information.

        ooppttiioonn mmaaxx--ddggrraamm--rreeaasssseemmbbllyy _u_i_n_t_1_6;;

       This option specifies the maximum size datagram  that  the
       client  should  be  prepared  to  reassemble.  The minimum
       value legal value is 576.

        ooppttiioonn ddeeffaauulltt--iipp--ttttll _u_i_n_t_8_;

       This option specifies the default  time-to-live  that  the
       client should use on outgoing datagrams.

        ooppttiioonn ppaatthh--mmttuu--aaggiinngg--ttiimmeeoouutt _u_i_n_t_3_2;;

       This option specifies the timeout (in seconds) to use when
       aging Path MTU values discovered by the mechanism  defined
       in RFC 1191.

        ooppttiioonn ppaatthh--mmttuu--ppllaatteeaauu--ttaabbllee _u_i_n_t_1_6 [,, _u_i_n_t_1_6 ... ];;

       This  option  specifies  a  table of MTU sizes to use when
       performing Path MTU Discovery as defined in RFC 1191.  The
       table  is formatted as a list of 16-bit unsigned integers,
       ordered from smallest to largest.  The minimum  MTU  value
       cannot be smaller than 68.

        ooppttiioonn iinntteerrffaaccee--mmttuu _u_i_n_t_1_6;;

       This  option  specifies  the MTU to use on this interface.
       The minimum legal value for the MTU is 68.

        ooppttiioonn aallll--ssuubbnneettss--llooccaall _f_l_a_g;;

       This option specifies whether or not the client may assume
       that  all subnets of the IP network to which the client is
       connected use the same MTU as the subnet of  that  network
       to  which  the client is directly connected.  A value of 1
       indicates that all subnets share the same MTU.  A value of
       0 means that the client should assume that some subnets of
       the directly connected network may have smaller MTUs.

        ooppttiioonn bbrrooaaddccaasstt--aaddddrreessss _i_p_-_a_d_d_r_e_s_s;;

       This option specifies the broadcast address in use on  the
       client's subnet.  Legal values for broadcast addresses are
       specified in section 3.2.1.3 of STD 3 (RFC1122).

        ooppttiioonn ppeerrffoorrmm--mmaasskk--ddiissccoovveerryy _f_l_a_g;;

       This option specifies whether or  not  the  client  should
       perform  subnet  mask  discovery using ICMP.  A value of 0
       indicates that the client should not perform mask  discov-
       ery.   A  value  of 1 means that the client should perform



                                                               14





dhcpd.conf(5)                                       dhcpd.conf(5)


       mask discovery.

        ooppttiioonn mmaasskk--ssuupppplliieerr _f_l_a_g;;

       This option specifies whether or  not  the  client  should
       respond  to subnet mask requests using ICMP.  A value of 0
       indicates that the client should not respond.  A value  of
       1 means that the client should respond.

        ooppttiioonn rroouutteerr--ddiissccoovveerryy _f_l_a_g;;

       This  option  specifies  whether  or not the client should
       solicit  routers  using  the  Router  Discovery  mechanism
       defined  in  RFC  1256.   A  value of 0 indicates that the
       client should not perform router discovery.  A value of  1
       means that the client should perform router discovery.

        ooppttiioonn rroouutteerr--ssoolliicciittaattiioonn--aaddddrreessss _i_p_-_a_d_d_r_e_s_s;;

       This  option  specifies  the  address  to which the client
       should transmit router solicitation requests.

        ooppttiioonn ssttaattiicc--rroouutteess _i_p_-_a_d_d_r_e_s_s _i_p_-_a_d_d_r_e_s_s [,,  _i_p_-_a_d_d_r_e_s_s
       _i_p_-_a_d_d_r_e_s_s ... ];;

       This  option  specifies  a  list of static routes that the
       client should install in its routing cache.   If  multiple
       routes  to  the  same  destination are specified, they are
       listed in descending order of priority.

       The routes consist of a list of  IP  address  pairs.   The
       first  address  is the destination address, and the second
       address is the router for the destination.

       The default route (0.0.0.0) is an illegal destination  for
       a  static  route.   To  specify the default route, use the
       rroouutteerrss option.

        ooppttiioonn ttrraaiilleerr--eennccaappssuullaattiioonn _f_l_a_g;;

       This option specifies whether or  not  the  client  should
       negotiate  the  use  of trailers (RFC 893 [14]) when using
       the ARP protocol.  A value of 0 indicates that the  client
       should  not  attempt  to use trailers.  A value of 1 means
       that the client should attempt to use trailers.

        ooppttiioonn aarrpp--ccaacchhee--ttiimmeeoouutt _u_i_n_t_3_2;;

       This option specifies the timeout in seconds for ARP cache
       entries.

        ooppttiioonn iieeeeee880022--33--eennccaappssuullaattiioonn _f_l_a_g;;

       This option specifies whether or not the client should use



                                                               15





dhcpd.conf(5)                                       dhcpd.conf(5)


       Ethernet Version 2 (RFC 894)  or  IEEE  802.3  (RFC  1042)
       encapsulation if the interface is an Ethernet.  A value of
       0 indicates that the client should use RFC 894  encapsula-
       tion.   A  value of 1 means that the client should use RFC
       1042 encapsulation.

        ooppttiioonn ddeeffaauulltt--ttccpp--ttttll _u_i_n_t_8;;

       This option specifies the  default  TTL  that  the  client
       should  use  when sending TCP segments.  The minimum value
       is 1.

        ooppttiioonn ttccpp--kkeeeeppaalliivvee--iinntteerrvvaall _u_i_n_t_3_2;;

       This option specifies the interval (in seconds)  that  the
       client  TCP should wait before sending a keepalive message
       on a TCP connection.  The time is specified  as  a  32-bit
       unsigned  integer.   A  value  of  zero indicates that the
       client should not generate keepalive messages  on  connec-
       tions unless specifically requested by an application.

        ooppttiioonn ttccpp--kkeeeeppaalliivvee--ggaarrbbaaggee _f_l_a_g;;

       This option specifies the whether or not the client should
       send TCP keepalive messages with a octet  of  garbage  for
       compatibility  with  older  implementations.  A value of 0
       indicates that a garbage octet should not be sent. A value
       of 1 indicates that a garbage octet should be sent.

        ooppttiioonn nniiss--ddoommaaiinn _s_t_r_i_n_g;;

       This  option  specifies  the name of the client's NIS (Sun
       Network Information Services) domain.  The domain is  for-
       matted as a character string consisting of characters from
       the NVT ASCII character set.

        ooppttiioonn nniiss--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s ... ];;

       This option specifies a list of  IP  addresses  indicating
       NIS  servers  available  to the client.  Servers should be
       listed in order of preference.

        ooppttiioonn nnttpp--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s ... ];;

       This option specifies a list of  IP  addresses  indicating
       NTP  (RFC  1035) servers available to the client.  Servers
       should be listed in order of preference.

        ooppttiioonn nneettbbiiooss--nnaammee--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s  ...
       ];;

       The  NetBIOS name server (NBNS) option specifies a list of
       RFC 1001/1002 NBNS name servers listed in order of prefer-
       ence.



                                                               16





dhcpd.conf(5)                                       dhcpd.conf(5)


        ooppttiioonn nneettbbiiooss--dddd--sseerrvveerr _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s ... ];;

       The  NetBIOS  datagram  distribution  server (NBDD) option
       specifies a list of RFC 1001/1002 NBDD servers  listed  in
       order of preference.

        ooppttiioonn nneettbbiiooss--nnooddee--ttyyppee _u_i_n_t_8;;

       The  NetBIOS  node  type option allows NetBIOS over TCP/IP
       clients  which  are  configurable  to  be  configured   as
       described  in  RFC 1001/1002.  The value is specified as a
       single octet which identifies the client type.  A value of
       1  corresponds  to  a  NetBIOS B-node; a value of 2 corre-
       sponds to a P-node; a value of 4 corresponds to an M-node;
       a value of 8 corresponds to an H-node.

        ooppttiioonn nneettbbiiooss--ssccooppee _s_t_r_i_n_g;;

       The NetBIOS scope option specifies the NetBIOS over TCP/IP
       scope  parameter  for  the  client  as  specified  in  RFC
       1001/1002.  See  RFC1001, RFC1002, and RFC1035 for charac-
       ter-set restrictions.

        ooppttiioonn ffoonntt--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s ... ];;

       This option specifies a  list  of  X  Window  System  Font
       servers  available to the client. Servers should be listed
       in order of preference.

        ooppttiioonn xx--ddiissppllaayy--mmaannaaggeerr _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s ... ];;

       This option specifies a list of systems that  are  running
       the  X  Window System Display Manager and are available to
       the client.  Addresses should be listed in order of  pref-
       erence.

        ooppttiioonn ddhhccpp--cclliieenntt--iiddeennttiiffiieerr _d_a_t_a_-_s_t_r_i_n_g;;

       This option can be used to specify the a DHCP client iden-
       tifier in a host declaration, so that dhcpd can  find  the
       host record by matching against the client identifier.

SSEEEE AALLSSOO
       dhcpd.conf(5),       dhcpd.leases(5),      draft-ietf-dhc-
       options-1533update-04.txt, draft-ietf-dhc-dhcp-07.txt.

AAUUTTHHOORR
       ddhhccppdd((88)) was written by Ted Lemon <mellon@vix.com> under a
       contract  with  Vixie Labs.   Funding for this project was
       provided by the Internet Software  Corporation.   Informa-
       tion  about  the Internet Software Consortium can be found
       at hhttttpp::////wwwwww..iisscc..oorrgg//iisscc..





                                                               17


