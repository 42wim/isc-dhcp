


Headers, Environments, and Macros                   dhcpd.conf(5)



NNNNAAAAMMMMEEEE
     dhcpd.conf - dhcpd configuration file

DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
     The dhcpd.conf file contains configuration  information  for
     _d_h_c_p_d, the Internet Software Consortium DHCP Server.

     The dhcpd.conf file is a free-form ASCII text file.   It  is
     parsed  by  the  recursive-descent  parser built into dhcpd.
     The file may contain extra tabs and newlines for  formatting
     purposes.  Keywords in the file are case-insensitive.   Com-
     ments may be placed anywhere within the file (except  within
     quotes).    Comments  begin  with the # character and end at
     the end of the line.

     The file essentially  consists  of  a  list  of  statements.
     Statements  fall  into two broad categories - parameters and
     declarations.

     Parameter statements either say how to do  something  (e.g.,
     how  long  a lease to offer), whether to do something (e.g.,
     should dhcpd provide addresses to unknown clients), or  what
     parameters  to  provide  to  the  client  (e.g., use gateway
     220.177.244.7).

     Declarations are used to describe the topology of  the  net-
     work,  to  describe  clients  on  the  network,  to  provide
     addresses that can be assigned to clients,  or  to  apply  a
     group  of  parameters  to  a group of declarations.   In any
     group of parameters and declarations, all parameters must be
     specified  before  any  declarations  which  depend on those
     parameters may be specified.

     Declarations about network topology include the
      _s_h_a_r_e_d-_n_e_t_w_o_r_k and the _s_u_b_n_e_t declarations.   If clients on
     a  subnet  are to be assigned addresses dynamically, a _r_a_n_g_e
     declaration must appear within the _s_u_b_n_e_t declaration.   For
     clients with statically assigned addresses, or for installa-
     tions where only known clients will  be  served,  each  such
     client  must have a _h_o_s_t declaration.   If parameters are to
     be applied to a group of declarations which are not  related
     strictly on a per-subnet basis, the _g_r_o_u_p declaration can be
     used.

     For every subnet which will be served, and for every  subnet
     to  which  the  dhcp  server is connected, there must be one
     _s_u_b_n_e_t declaration, which tells dhcpd how to recognize  that
     an  address  is  on  that  subnet.   A _s_u_b_n_e_t declaration is
     required for each subnet even if no addresses will be dynam-
     ically allocated on that subnet.





SunOS 5.6                 Last change:                          1






Headers, Environments, and Macros                   dhcpd.conf(5)



     Some installations have physical networks on which more than
     one  IP  subnet operates.   For example, if there is a site-
     wide requirement that 8-bit subnet  masks  be  used,  but  a
     department  with  a single physical ethernet network expands
     to the point where it has more than 254  nodes,  it  may  be
     necessary  to  run  two  8-bit  subnets on the same ethernet
     until such time as a new physical network can be added.   In
     this  case,  the  _s_u_b_n_e_t declarations for these two networks
     may be enclosed in a _s_h_a_r_e_d-_n_e_t_w_o_r_k declaration.

     Some sites may have departments which have clients  on  more
     than  one  subnet,  but  it  may be desirable to offer those
     clients a uniform set of parameters which are different than
     what  would  be offered to clients from other departments on
     the same subnet.   For clients which will be declared expli-
     citly  with  _h_o_s_t  declarations,  these  declarations can be
     enclosed in a _g_r_o_u_p declaration along  with  the  parameters
     which  are  common  to  that department.   For clients whose
     addresses will be dynamically assigned, there  is  currently
     no  way to group parameter assignments other than by network
     topology.

     When a client is to  be  booted,  its  boot  parameters  are
     determined  by  first consulting that client's _h_o_s_t declara-
     tion (if any), then consulting  the  _g_r_o_u_p  declaration  (if
     any)  which  enclosed that _h_o_s_t declaration, then consulting
     the _s_u_b_n_e_t declaration for the subnet on which the client is
     booting,  then consulting the _s_h_a_r_e_d-_n_e_t_w_o_r_k declaration (if
     any) containing that  subnet,  and  finally  consulting  the
     top-level  parameters  which may be specified outside of any
     declaration.

     When dhcpd tries to find a _h_o_s_t declaration for a client, it
     first looks for a _h_o_s_t declaration which has a _f_i_x_e_d-_a_d_d_r_e_s_s
     parameter which matches the  subnet  or  shared  network  on
     which  the  client is booting.   If it doesn't find any such
     entry, it then tries to find an entry which  has  no  _f_i_x_e_d-
     _a_d_d_r_e_s_s  parameter.    If no such entry is found, then dhcpd
     acts as if there is no entry in the dhcpd.conf file for that
     client,  even if there is an entry for that client on a dif-
     ferent subnet or shared network.

EEEEXXXXAAAAMMMMPPPPLLLLEEEESSSS
     A typical dhcpd.conf file will look something like this:

     _g_l_o_b_a_l _p_a_r_a_m_e_t_e_r_s...

     subnet 204.254.239.0 netmask 255.255.255.224 {
       _s_u_b_n_e_t-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s...
       range 204.254.239.10 204.254.239.30;
     }




SunOS 5.6                 Last change:                          2






Headers, Environments, and Macros                   dhcpd.conf(5)



     subnet 204.254.239.32 netmask 255.255.255.224 {
       _s_u_b_n_e_t-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s...
       range 204.254.239.42 204.254.239.62;
     }

     subnet 204.254.239.64 netmask 255.255.255.224 {
       _s_u_b_n_e_t-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s...
       range 204.254.239.74 204.254.239.94;
     }

     group {
       _g_r_o_u_p-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s...
       host zappo.test.isc.org {
         _h_o_s_t-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s...
       }
       host beppo.test.isc.org {
         _h_o_s_t-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s...
       }
       host harpo.test.isc.org {
         _h_o_s_t-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s...
       }
     }

                               Figure 1


     Notice that at the beginning of the file,  there's  a  place
     for  global  parameters.    These  might  be things like the
     organization's  domain  name,  the  addresses  of  the  name
     servers (if they are common to the entire organization), and
     so on.   So, for example:

          option domain-name "isc.org";
          option domain-name-servers ns1.isc.org, ns2.isc.org;

                               Figure 2

     As you can see in Figure 2, you can specify  host  addresses
     in  parameters  using  their  domain names rather than their
     numeric IP addresses.  If a given hostname resolves to  more
     than  one IP address (for example, if that host has two eth-
     ernet interfaces), then where possible, both  addresses  are
     supplied to the client.

     The most obvious reason for having  subnet-specific  parame-
     ters as shown in Figure 1 is that each subnet, of necessity,
     has its own router.   So for the first subnet, for  example,
     there should be something like:

          option routers 204.254.239.1;





SunOS 5.6                 Last change:                          3






Headers, Environments, and Macros                   dhcpd.conf(5)



     Note that the address here is specified numerically.    This
     is  not  required  - if you have a different domain name for
     each interface on your router, it's perfectly legitimate  to
     use  the  domain  name  for  that  interface  instead of the
     numeric address.   However, in many cases there may be  only
     one  domain  name for all of a router's IP addresses, and it
     would not be appropriate to use that name here.

     In Figure 1 there is also a _g_r_o_u_p statement, which  provides
     common  parameters  for  a set of three hosts - zappo, beppo
     and harpo.  As you can see,  these  hosts  are  all  in  the
     test.isc.org  domain,  so  it  might make sense for a group-
     specific parameter to override the domain name  supplied  to
     these hosts:

          option domain-name "test.isc.org";

     Also, given the domain they're in, these are  probably  test
     machines.   If we wanted to test the DHCP leasing mechanism,
     we might set the lease timeout  somewhat  shorter  than  the
     default:

          max-lease-time 120;
          default-lease-time 120;

     You may have noticed that while some parameters  start  with
     the  _o_p_t_i_o_n keyword, some do not.   Parameters starting with
     the _o_p_t_i_o_n keyword correspond to actual DHCP options,  while
     parameters  that do not start with the option keyword either
     control the behaviour of the DHCP server (e.g., how  long  a
     lease  dhcpd  will  give  out), or specify client parameters
     that are not optional in the  DHCP  protocol  (for  example,
     server-name and filename).

     In Figure 1, each host had _h_o_s_t-_s_p_e_c_i_f_i_c _p_a_r_a_m_e_t_e_r_s.   These
     could  include  such things as the _h_o_s_t_n_a_m_e option, the name
     of a file to upload (the _f_i_l_e_n_a_m_e _p_a_r_a_m_e_t_e_r) _a_n_d _t_h_e _a_d_d_r_e_s_s
     _o_f _t_h_e _s_e_r_v_e_r _f_r_o_m _w_h_i_c_h _t_o _u_p_l_o_a_d _t_h_e _f_i_l_e (_t_h_e _n_e_x_t-_s_e_r_v_e_r
     parameter).   In general, any parameter can appear  anywhere
     that  parameters  are allowed, and will be applied according
     to the scope in which the parameter appears.

     Imagine that you have a site with a lot of NCD  X-Terminals.
     These terminals come in a variety of models, and you want to
     specify the boot files for each models.   One way to do this
     would be to have host declarations for each server and group
     them by model:

     group {
       filename "Xncd19r";
       next-server ncd-booter;




SunOS 5.6                 Last change:                          4






Headers, Environments, and Macros                   dhcpd.conf(5)



       host ncd1 { hardware ethernet 0:c0:c3:49:2b:57; }
       host ncd4 { hardware ethernet 0:c0:c3:80:fc:32; }
       host ncd8 { hardware ethernet 0:c0:c3:22:46:81; }
     }

     group {
       filename "Xncd19c";
       next-server ncd-booter;

       host ncd2 { hardware ethernet 0:c0:c3:88:2d:81; }
       host ncd3 { hardware ethernet 0:c0:c3:00:14:11; }
     }

     group {
       filename "XncdHMX";
       next-server ncd-booter;

       host ncd1 { hardware ethernet 0:c0:c3:11:90:23; }
       host ncd4 { hardware ethernet 0:c0:c3:91:a7:8; }
       host ncd8 { hardware ethernet 0:c0:c3:cc:a:8f; }
     }

AAAADDDDDDDDRRRREEEESSSSSSSS PPPPOOOOOOOOLLLLSSSS
     The ppppoooooooollll declaration can  be  used  to  specify  a  pool  of
     addresses that will be treated differently than another pool
     of addresses, even on the same network  segment  or  subnet.
     For  example,  you  may  want  to  provide  a  large  set of
     addresses that can be assigned  to  DHCP  clients  that  are
     registered  to  your  DHCP server, while providing a smaller
     set of addresses, possibly with short lease times, that  are
     available for unknown clients.   If you have a firewall, you
     may be able to arrange for addresses from  one  pool  to  be
     allowed  access  to the Internet, while addresses in another
     pool are not, thus encouraging users to register their  DHCP
     clients.    To  do  this,  you  would  set up a pair of pool
     declarations:

     subnet 10.0.0.0 netmask 255.255.255.0 {
       option routers 10.0.0.254;

       # Unknown clients get this pool.
       pool {
         option domain-name-servers bogus.example.com;
         max-lease-time 300;
         range 10.0.0.200 10.0.0.253;
         allow unknown clients;
       }

       # Known clients get this pool.
       pool {
         option domain-name-servers ns1.example.com, ns2.example.com;
         max-lease-time 28800;



SunOS 5.6                 Last change:                          5






Headers, Environments, and Macros                   dhcpd.conf(5)



         range 10.0.0.5 10.0.0.199;
         deny unknown clients;
       }
     }

     It is also possible to set up entirely different subnets for
     known and unknown clients - address pools exist at the level
     of shared networks, so address ranges within  pool  declara-
     tions can be on different subnets.

CCCCLLLLIIIIEEEENNNNTTTT CCCCLLLLAAAASSSSSSSSIIIINNNNGGGG
     Clients can be seperated  into  classes,  and  treated  dif-
     ferently depending on what class they are in.   This sepera-
     tion can be done either with  a  conditional  statement,  or
     with a match statement within the class declaration.   It is
     possible to specify a limit on the total number  of  clients
     within  a  particular class or subclass that may hold leases
     at one time, and it is possible to  specify  automatic  sub-
     classing based on the contents of the client packet.

     To add clients to classes based on  conditional  evaluation,
     you  would  write  an  conditional  statement  to  match the
     clients you wanted in the class, and then put an aaaadddddddd  state-
     ment in the conditional's list of statements:

     if substring (option dhcp-client-identifier, 0, 3) = "RAS" {
       add ras-clients;
     }

     An equivalent way to do this is to simply specify the condi-
     tional  expression  as  a  matching  expression in the class
     statement:

     class ras-clients {
       match if substring (option dhcp-client-identifier, 0, 3) = "RAS";
     }

     In addition to classes, it  is  possible  to  declare  subc-
     lasses.   A subclass is a class with the same name as a reg-
     ular class, but with a specific submatch expression which is
     hashed for quick matching.  This is essentially a speed hack
     - the  main  difference  between  five  classes  with  match
     expressions  and  one  class with five subclasses is that it
     will be quicker to find the subclasses.   Subclasses work as
     follows:

     class vendor-classes {
       match option vendor-class-identifier;
     }

     subclass vendor-classes "SUNW.Ultra-5_10" {
       option vendor-encapsulated-options



SunOS 5.6                 Last change:                          6






Headers, Environments, and Macros                   dhcpd.conf(5)



             2:AC:11:41:1:
             3:12:73:75:6e:64:68:63:70:2d:73:65:72:76:65:72:31:37:2d:31:
             4:12:2f:65:78:70:6f:72:74:2f:72:6f:6f:74:2f:73:70:61:72:63;
     }

     subclass vendor-classes "SUNW.i86pc" {
       option vendor-encapsulated-options
             2:4:AC:11:41:1:
             3:12:73:75:6e:64:68:63:70:2d:73:65:72:76:65:72:31:37:2d:31:
             4:12:2f:65:78:70:6f:72:74:2f:72:6f:6f:74:2f:69:38:36:70:63;
     }

     The string following  the  class  name  for  the  subclasses
     specifies  the  string that is expected to match the expres-
     sion in the class declaration for the vendor-classes class.

     You may specify a limit to the number of clients in a  class
     that can be assigned leases.   The effect of this will be to
     make it difficult for a new client in  a  class  to  get  an
     address.    Once  a  class with such a limit has reached its
     limit, the only way a new client in that  class  can  get  a
     lease  is  for  an  existing client to relinquish its lease,
     either by letting it expire, or  by  sending  a  DHCPRELEASE
     packet.    Classes  with  lease limits are specified as fol-
     lows:

     class limited-1 {
       lease limit 4;
     }

     This will produce a class in which a maximum of four members
     may hold a lease at one time.

     It is possible to declare a _s_p_a_w_n_i_n_g _c_l_a_s_s. A spawning class
     is  a  class that automatically produces subclasses based on
     what the client sends.   The reason  that  spawning  classes
     were created was to make it possible to create lease-limited
     classes on  the  fly.    The  envisioned  application  is  a
     cable-modem  environment  where  the  ISP  wishes to provide
     clients at a particular site with more than one IP  address,
     but  does  not  wish  to provide such clients with their own
     subnet, nor give them an unlimited number  of  IP  addresses
     from the network segment to which they are connected.

     Many cable modem head-end systems can be configured to add a
     Relay Agent Information option to DHCP packets when relaying
     them to the DHCP server.   These  systems  typically  add  a
     circuit  ID or remote ID option that uniquely identifies the
     customer site.   To take advantage of this, you can write  a
     class declaration as follows:
     class customer {
       match if exists agent.circuit-id;



SunOS 5.6                 Last change:                          7






Headers, Environments, and Macros                   dhcpd.conf(5)



       spawn with agent.circuit-id;
       lease limit 4;
     }

     Now whenever a request comes in from a  customer  site,  the
     circuit  ID  option will be checked against the class's hash
     table.   If a subclass is found that matches the circuit ID,
     the  client  will be classified in that subclass and treated
     accordingly.   If no subclass is found matching the  circuit
     ID, a new one will be created and logged in the ddddhhhhccccppppdddd....lllleeeeaaaasssseeeessss
     file, and the client will be classified in this  new  class.
     Once  the  client  has  been  classified, it will be treated
     according to the rules of  the  class,  including,  in  this
     case, being subject to the per-site limit of four leases.

     The use of the subclass spawning mechanism is not restricted
     to  relay  agent  options - this particular example is given
     only because it is a fairly straightforward one.

RRRREEEEFFFFEEEERRRREEEENNNNCCCCEEEE:::: DDDDEEEECCCCLLLLAAAARRRRAAAATTTTIIIIOOOONNNNSSSS
     TTTThhhheeee _s_h_a_r_e_d-_n_e_t_w_o_r_k ssssttttaaaatttteeeemmmmeeeennnntttt

      sssshhhhaaaarrrreeeedddd----nnnneeeettttwwwwoooorrrrkkkk _n_a_m_e {{{{
        [ _p_a_r_a_m_e_t_e_r_s ]
        [ _d_e_c_l_a_r_a_t_i_o_n_s ]
      }}}}

     The _s_h_a_r_e_d-_n_e_t_w_o_r_k statement is  used  to  inform  the  DHCP
     server that some IP subnets actually share the same physical
     network.  Any subnets in a shared network should be declared
     within  a _s_h_a_r_e_d-_n_e_t_w_o_r_k statement.  Parameters specified in
     the _s_h_a_r_e_d-_n_e_t_w_o_r_k  statement  will  be  used  when  booting
     clients  on  those subnets unless parameters provided at the
     subnet or host level override them.   If  any  subnet  in  a
     shared  network  has addresses available for dynamic alloca-
     tion, those addresses are collected into a common  pool  for
     that  shared  network  and  assigned  to  clients as needed.
     There is no way to distinguish on which subnet of  a  shared
     network a client should boot.

     _N_a_m_e should be the name of the shared network.    This  name
     is  used  when  printing debugging messages, so it should be
     descriptive for the shared network.   The name may have  the
     syntax  of  a  valid  domain name (although it will never be
     used as such), or it may be any arbitrary name, enclosed  in
     quotes.

     TTTThhhheeee _s_u_b_n_e_t ssssttttaaaatttteeeemmmmeeeennnntttt

      ssssuuuubbbbnnnneeeetttt _s_u_b_n_e_t-_n_u_m_b_e_r nnnneeeettttmmmmaaaasssskkkk _n_e_t_m_a_s_k {{{{
        [ _p_a_r_a_m_e_t_e_r_s ]
        [ _d_e_c_l_a_r_a_t_i_o_n_s ]



SunOS 5.6                 Last change:                          8






Headers, Environments, and Macros                   dhcpd.conf(5)



      }}}}

     The _s_u_b_n_e_t statement is used to provide  dhcpd  with  enough
     information  to tell whether or not an IP address is on that
     subnet.  It may also  be  used  to  provide  subnet-specific
     parameters  and to specify what addresses may be dynamically
     allocated  to  clients  booting  on  that   subnet.     Such
     addresses are specified using the _r_a_n_g_e declaration.

     The _s_u_b_n_e_t-_n_u_m_b_e_r should be an IP  address  or  domain  name
     which  resolves  to  the  subnet  number of the subnet being
     described.   The _n_e_t_m_a_s_k should be an IP address  or  domain
     name  which  resolves to the subnet mask of the subnet being
     described.   The subnet number, together with  the  netmask,
     are  sufficient to determine whether any given IP address is
     on the specified subnet.

     Although a netmask must be given with every subnet  declara-
     tion,  it  is  recommended  that if there is any variance in
     subnet masks at a site, a subnet-mask  option  statement  be
     used  in  each  subnet declaration to set the desired subnet
     mask, since any subnet-mask option statement  will  override
     the subnet mask declared in the subnet statement.

     TTTThhhheeee _r_a_n_g_e ssssttttaaaatttteeeemmmmeeeennnntttt

     rrrraaaannnnggggeeee [ ddddyyyynnnnaaaammmmiiiicccc----bbbboooooooottttpppp ] _l_o_w-_a_d_d_r_e_s_s [

     For any subnet on which addresses will be  assigned  dynami-
     cally,  there  must  be  at least one _r_a_n_g_e statement.   The
     range statement gives the lowest and highest IP addresses in
     a  range.    All  IP addresses in the range should be in the
     subnet in which  the  _r_a_n_g_e  statement  is  declared.    The
     _d_y_n_a_m_i_c-_b_o_o_t_p  flag  may  be  specified  if addresses in the
     specified range may be dynamically assigned to BOOTP clients
     as well as DHCP clients.   When specifying a single address,
     _h_i_g_h-_a_d_d_r_e_s_s can be omitted.

     TTTThhhheeee _h_o_s_t ssssttttaaaatttteeeemmmmeeeennnntttt

      hhhhoooosssstttt _h_o_s_t_n_a_m_e {
        [ _p_a_r_a_m_e_t_e_r_s ]
        [ _d_e_c_l_a_r_a_t_i_o_n_s ]
      }}}}

     There must be at least one hhhhoooosssstttt statement  for  every  BOOTP
     client  that  is  to  be served. hhhhoooosssstttt statements may also be
     specified for DHCP clients, although this  is  not  required
     unless booting is only enabled for known hosts.

     If it is desirable to be able to boot a DHCP or BOOTP client
     on  more than one subnet with fixed addresses, more than one



SunOS 5.6                 Last change:                          9






Headers, Environments, and Macros                   dhcpd.conf(5)



     address may be specified in the _f_i_x_e_d-_a_d_d_r_e_s_s parameter,  or
     more than one hhhhoooosssstttt statement may be specified.

     If client-specific boot parameters must change based on  the
     network  to which the client is attached, then multiple hhhhoooosssstttt
     statements should be used.

     If a client is to be booted using a fixed  address  if  it's
     possible,  but  should be allocated a dynamic address other-
     wise, then a hhhhoooosssstttt statement  must  be  specified  without  a
     ffffiiiixxxxeeeedddd----aaaaddddddddrrrreeeessssssss clause.  _h_o_s_t_n_a_m_e should be a name identifying
     the host.  If a _h_o_s_t_n_a_m_e option is  not  specified  for  the
     host, _h_o_s_t_n_a_m_e is used.

     _H_o_s_t declarations  are  matched  to  actual  DHCP  or  BOOTP
     clients by matching the dhcp-client-identifier option speci-
     fied in the _h_o_s_t declaration to  the  one  supplied  by  the
     client,  or,  if the _h_o_s_t declaration or the client does not
     provide a dhcp-client-identifier  option,  by  matching  the
     _h_a_r_d_w_a_r_e  parameter  in  the _h_o_s_t declaration to the network
     hardware address supplied by the client.   BOOTP clients  do
     not   normally  provide  a  _d_h_c_p-_c_l_i_e_n_t-_i_d_e_n_t_i_f_i_e_r,  so  the
     hardware address must be used for all clients that may  boot
     using the BOOTP protocol.

     TTTThhhheeee _g_r_o_u_p ssssttttaaaatttteeeemmmmeeeennnntttt

      ggggrrrroooouuuupppp {
        [ _p_a_r_a_m_e_t_e_r_s ]
        [ _d_e_c_l_a_r_a_t_i_o_n_s ]
      }}}}

     The group statement is used simply  to  apply  one  or  more
     parameters  to  a group of declarations.   It can be used to
     group hosts, shared networks, subnets, or even other groups.

RRRREEEEFFFFEEEERRRREEEENNNNCCCCEEEE:::: AAAALLLLLLLLOOOOWWWW aaaannnndddd DDDDEEEENNNNYYYY
     The _a_l_l_o_w and _d_e_n_y statements can be  used  to  control  the
     behaviour of dhcpd to various sorts of requests.

     TTTThhhheeee _u_n_k_n_o_w_n-_c_l_i_e_n_t_s kkkkeeeeyyyywwwwoooorrrrdddd

      aaaalllllllloooowwww uuuunnnnkkkknnnnoooowwwwnnnn----cccclllliiiieeeennnnttttssss;;;;
      ddddeeeennnnyyyy uuuunnnnkkkknnnnoooowwwwnnnn----cccclllliiiieeeennnnttttssss;;;;

     The uuuunnnnkkkknnnnoooowwwwnnnn----cccclllliiiieeeennnnttttssss flag is used to tell  dhcpd  whether  or
     not  to  dynamically  assign  addresses  to unknown clients.
     Dynamic address assignment to unknown clients is aaaalllllllloooowwwwed  by
     default.

     TTTThhhheeee _b_o_o_t_p kkkkeeeeyyyywwwwoooorrrrdddd




SunOS 5.6                 Last change:                         10






Headers, Environments, and Macros                   dhcpd.conf(5)



      aaaalllllllloooowwww bbbboooooooottttpppp;;;;
      ddddeeeennnnyyyy bbbboooooooottttpppp;;;;

     The bbbboooooooottttpppp flag is used to  tell  dhcpd  whether  or  not  to
     respond  to  bootp  queries.   Bootp  queries are aaaalllllllloooowwwwed by
     default.

     TTTThhhheeee _b_o_o_t_i_n_g kkkkeeeeyyyywwwwoooorrrrdddd

      aaaalllllllloooowwww bbbboooooooottttiiiinnnngggg;;;;
      ddddeeeennnnyyyy bbbboooooooottttiiiinnnngggg;;;;

     The bbbboooooooottttiiiinnnngggg flag is used to tell dhcpd  whether  or  not  to
     respond  to  queries from a particular client.  This keyword
     only has meaning when it appears in a host declaration.   By
     default,  booting  is  aaaalllllllloooowwwwed,  but if it is disabled for a
     particular client, then that client will not be able to  get
     and address from the DHCP server.

RRRREEEEFFFFEEEERRRREEEENNNNCCCCEEEE:::: PPPPAAAARRRRAAAAMMMMEEEETTTTEEEERRRRSSSS
     TTTThhhheeee _d_e_f_a_u_l_t-_l_e_a_s_e-_t_i_m_e ssssttttaaaatttteeeemmmmeeeennnntttt

      ddddeeeeffffaaaauuuulllltttt----lllleeeeaaaasssseeee----ttttiiiimmmmeeee _t_i_m_e;;;;

     _T_i_m_e should be the length in seconds that will  be  assigned
     to  a  lease if the client requesting the lease does not ask
     for a specific expiration time.

     TTTThhhheeee _m_a_x-_l_e_a_s_e-_t_i_m_e ssssttttaaaatttteeeemmmmeeeennnntttt

      mmmmaaaaxxxx----lllleeeeaaaasssseeee----ttttiiiimmmmeeee _t_i_m_e;;;;

     _T_i_m_e should be the maximum length in seconds  that  will  be
     assigned  to  a  lease.   The only exception to this is that
     Dynamic BOOTP lease lengths, which are not specified by  the
     client, are not limited by this maximum.

     TTTThhhheeee _m_i_n-_l_e_a_s_e-_t_i_m_e ssssttttaaaatttteeeemmmmeeeennnntttt

      mmmmiiiinnnn----lllleeeeaaaasssseeee----ttttiiiimmmmeeee _t_i_m_e;;;;

     _T_i_m_e should be the minimum length in seconds  that  will  be
     assigned to a lease.

     TTTThhhheeee _m_i_n-_s_e_c_s ssssttttaaaatttteeeemmmmeeeennnntttt

      mmmmiiiinnnn----sssseeeeccccssss _s_e_c_o_n_d_s;;;;

     _S_e_c_o_n_d_s should be the minimum  number  of  seconds  since  a
     client  began  trying to acquire a new lease before the DHCP
     server will respond to its request.  The number  of  seconds
     is  based  on what the client reports, and the maximum value



SunOS 5.6                 Last change:                         11






Headers, Environments, and Macros                   dhcpd.conf(5)



     that the client can report is 255 seconds.   Generally, set-
     ting this to one will result in the DHCP server not respond-
     ing to the client's first request, but always responding  to
     its second request.

     This can be used to set up a  secondary  DHCP  server  which
     never offers an address to a client until the primary server
     has been given a chance to do so.   If the primary server is
     down, the client will bind to the secondary server, but oth-
     erwise clients should always bind  to  the  primary.    Note
     that this does not, by itself, permit a primary server and a
     secondary server to share a pool of  dynamically-allocatable
     addresses.

     TTTThhhheeee _h_a_r_d_w_a_r_e ssssttttaaaatttteeeemmmmeeeennnntttt

      hhhhaaaarrrrddddwwwwaaaarrrreeee _h_a_r_d_w_a_r_e-_t_y_p_e _h_a_r_d_w_a_r_e-_a_d_d_r_e_s_s;;;;

     In order for a BOOTP client to be  recognized,  its  network
     hardware address must be declared using a _h_a_r_d_w_a_r_e clause in
     the _h_o_s_t statement.  _h_a_r_d_w_a_r_e-_t_y_p_e must be  the  name  of  a
     physical hardware interface type.   Currently, only the eeeetttthhhh----
     eeeerrrrnnnneeeetttt and ttttooookkkkeeeennnn----rrrriiiinnnngggg types are recognized, although  support
     for  a  ffffddddddddiiii hardware type (and others) would also be desir-
     able.  The _h_a_r_d_w_a_r_e-_a_d_d_r_e_s_s should be a set  of  hexadecimal
     octets  (numbers  from  0  through  ff) seperated by colons.
     The _h_a_r_d_w_a_r_e_f_R _s_t_a_t_e_m_e_n_t _m_a_y _a_l_s_o _b_e _u_s_e_d _f_o_r _D_H_C_P _c_l_i_e_n_t_s.

     TTTThhhheeee _f_i_l_e_n_a_m_e ssssttttaaaatttteeeemmmmeeeennnntttt

      ffffiiiilllleeeennnnaaaammmmeeee """"_f_i_l_e_n_a_m_e"""";;;;

     The _f_i_l_e_n_a_m_e statement can be used to specify  the  name  of
     the  initial  boot  file  which is to be loaded by a client.
     The _f_i_l_e_n_a_m_e should be a filename recognizable  to  whatever
     file  transfer protocol the client can be expected to use to
     load the file.

     TTTThhhheeee _s_e_r_v_e_r-_n_a_m_e ssssttttaaaatttteeeemmmmeeeennnntttt

      sssseeeerrrrvvvveeeerrrr----nnnnaaaammmmeeee """"_n_a_m_e"""";;;;

     The _s_e_r_v_e_r-_n_a_m_e statement can be used to inform  the  client
     of  the  name of the server from which it is booting.   _N_a_m_e
     should be the name that will be provided to the client.

     TTTThhhheeee _n_e_x_t-_s_e_r_v_e_r ssssttttaaaatttteeeemmmmeeeennnntttt

      nnnneeeexxxxtttt----sssseeeerrrrvvvveeeerrrr _s_e_r_v_e_r-_n_a_m_e;;;;

     The _n_e_x_t-_s_e_r_v_e_r  statement  is  used  to  specify  the  host
     address  of  the  server  from  which  the initial boot file



SunOS 5.6                 Last change:                         12






Headers, Environments, and Macros                   dhcpd.conf(5)



     (specified in the  _f_i_l_e_n_a_m_e  statement)  is  to  be  loaded.
     _S_e_r_v_e_r-_n_a_m_e should be a numeric IP address or a domain name.
     If no _n_e_x_t-_s_e_r_v_e_r parameter applies to a given  client,  the
     DHCP server's IP address is used.

     TTTThhhheeee _f_i_x_e_d-_a_d_d_r_e_s_s ssssttttaaaatttteeeemmmmeeeennnntttt

      ffffiiiixxxxeeeedddd----aaaaddddddddrrrreeeessssssss _a_d_d_r_e_s_s [,,,, _a_d_d_r_e_s_s ... ];;;;

     The _f_i_x_e_d-_a_d_d_r_e_s_s statement is used to assign  one  or  more
     fixed  IP addresses to a client.  It should only appear in a
     _h_o_s_t declaration.  If more than  one  address  is  supplied,
     then  when the client boots, it will be assigned the address
     which corresponds to the network on which it is booting.  If
     none  of the addresses in the _f_i_x_e_d-_a_d_d_r_e_s_s statement are on
     the network on which the client is booting, that client will
     not match the _h_o_s_t declaration containing that _f_i_x_e_d-_a_d_d_r_e_s_s
     statement.  Each _a_d_d_r_e_s_s should be either an IP address or a
     domain name which resolves to one or more IP addresses.

     TTTThhhheeee _d_y_n_a_m_i_c-_b_o_o_t_p-_l_e_a_s_e-_c_u_t_o_f_f ssssttttaaaatttteeeemmmmeeeennnntttt

      ddddyyyynnnnaaaammmmiiiicccc----bbbboooooooottttpppp----lllleeeeaaaasssseeee----ccccuuuuttttooooffffffff _d_a_t_e;;;;

     The _d_y_n_a_m_i_c-_b_o_o_t_p-_l_e_a_s_e-_c_u_t_o_f_f  statement  sets  the  ending
     time  for  all leases assigned dynamically to BOOTP clients.
     Because BOOTP clients  do  not  have  any  way  of  renewing
     leases,  and  don't  know that their leases could expire, by
     default dhcpd assignes infinite leases to all BOOTP clients.
     However,  it may make sense in some situations to set a cut-
     off date for all BOOTP leases - for example, the  end  of  a
     school  term, or the time at night when a facility is closed
     and all machines are required to be powered off.

     _D_a_t_e should be the date on which all assigned  BOOTP  leases
     will end.  The date is specified in the form:

                        W YYYY/MM/DD HH:MM:SS

     W is the day of the week expressed as  a  number  from  zero
     (Sunday) to six (Saturday).  YYYY is the year, including the
     century.  MM is the month expressed as a number  from  1  to
     12.  DD is the day of the month, counting from 1.  HH is the
     hour, from zero to 23.  MM is  the  minute  and  SS  is  the
     second.   The  time  is always in Greenwich Mean Time (GMT),
     not local time.

     TTTThhhheeee _d_y_n_a_m_i_c-_b_o_o_t_p-_l_e_a_s_e-_l_e_n_g_t_h ssssttttaaaatttteeeemmmmeeeennnntttt

      ddddyyyynnnnaaaammmmiiiicccc----bbbboooooooottttpppp----lllleeeeaaaasssseeee----lllleeeennnnggggtttthhhh _l_e_n_g_t_h;;;;





SunOS 5.6                 Last change:                         13






Headers, Environments, and Macros                   dhcpd.conf(5)



     The _d_y_n_a_m_i_c-_b_o_o_t_p-_l_e_a_s_e-_l_e_n_g_t_h statement is used to set  the
     length of leases dynamically assigned to BOOTP clients.   At
     some sites, it may be possible to assume that a lease is  no
     longer  in  use  if its holder has not used BOOTP or DHCP to
     get its address within a certain time period.    The  period
     is specified in _l_e_n_g_t_h as a number of seconds.   If a client
     reboots using BOOTP during the  timeout  period,  the  lease
     duration  is  reset  to _l_e_n_g_t_h, so a BOOTP client that boots
     frequently enough will never lose its  lease.   Needless  to
     say, this parameter should be adjusted with extreme caution.

     TTTThhhheeee _g_e_t-_l_e_a_s_e-_h_o_s_t_n_a_m_e_s ssssttttaaaatttteeeemmmmeeeennnntttt

      ggggeeeetttt----lllleeeeaaaasssseeee----hhhhoooossssttttnnnnaaaammmmeeeessss _f_l_a_g;;;;

     The _g_e_t-_l_e_a_s_e-_h_o_s_t_n_a_m_e_s statement  is  used  to  tell  dhcpd
     whether  or  not to look up the domain name corresponding to
     the IP address of each address in the  lease  pool  and  use
     that address for the DHCP _h_o_s_t_n_a_m_e option.  If _f_l_a_g is true,
     then this lookup is done for all addresses  in  the  current
     scope.    By  default,  or  if _f_l_a_g is false, no lookups are
     done.

     TTTThhhheeee _u_s_e-_h_o_s_t-_d_e_c_l-_n_a_m_e_s ssssttttaaaatttteeeemmmmeeeennnntttt

      uuuusssseeee----hhhhoooosssstttt----ddddeeeeccccllll----nnnnaaaammmmeeeessss _f_l_a_g;;;;

     If the _u_s_e-_h_o_s_t-_d_e_c_l-_n_a_m_e_s parameter  is  true  in  a  given
     scope,  then  for  every host declaration within that scope,
     the name provided for the host declaration will be  supplied
     to the client as its hostname.   So, for example,

         group {
           use-host-decl-names on;

           host joe {
          hardware ethernet 08:00:2b:4c:29:32;
          fixed-address joe.fugue.com;
           }
         }

     is equivalent to

           host joe {
          hardware ethernet 08:00:2b:4c:29:32;
          fixed-address joe.fugue.com;
             option host-name "joe";
           }

     An _o_p_t_i_o_n _h_o_s_t-_n_a_m_e statement within a host declaration will
     override the use of the name in the host declaration.




SunOS 5.6                 Last change:                         14






Headers, Environments, and Macros                   dhcpd.conf(5)



     TTTThhhheeee _a_u_t_h_o_r_i_t_a_t_i_v_e ssssttttaaaatttteeeemmmmeeeennnntttt

      aaaauuuutttthhhhoooorrrriiiittttaaaattttiiiivvvveeee;;;;

      nnnnooootttt aaaauuuutttthhhhoooorrrriiiittttaaaattttiiiivvvveeee;;;;

     The DHCP server will normally assume that the  configuration
     information  about  a  given  network segment is known to be
     correct and is authoritative.   So if a client  requests  an
     IP  address on a given network segment that the server knows
     is not valid for that segment, the server will respond  with
     a  DHCPNAK  message,  causing  the  client  to forget its IP
     address and try to get a new one.

     If a DHCP server is being configured by somebody who is  not
     the network administrator and who therefore does not wish to
     assert this level of  authority,  then  the  statement  "not
     authoritative" should be written in the appropriate scope in
     the configuration file.

     Usually, writing nnnnooootttt aaaauuuutttthhhhoooorrrriiiittttaaaattttiiiivvvveeee;;;; at the top level of  the
     file should be sufficient.   However, if a DHCP server is to
     be set up so that it is aware of some networks for which  it
     is  authoritative  and some networks for which it is not, it
     may be more appropriate  to  declare  authority  on  a  per-
     network-segment basis.

     Note that the most specific scope for which the  concept  of
     authority  makes any sense is the physical network segment -
     either a shared-network statement or a subnet statement that
     is  not  contained within a shared-network statement.  It is
     not meaningful to specify that the server  is  authoritative
     for some subnets within a shared network, but not authorita-
     tive for others, nor is it meaningful to  specify  that  the
     server  is  authoritative for some host declarations and not
     others.

     TTTThhhheeee _u_s_e-_l_e_a_s_e-_a_d_d_r-_f_o_r-_d_e_f_a_u_l_t-_r_o_u_t_e ssssttttaaaatttteeeemmmmeeeennnntttt

      uuuusssseeee----lllleeeeaaaasssseeee----aaaaddddddddrrrr----ffffoooorrrr----ddddeeeeffffaaaauuuulllltttt----rrrroooouuuutttteeee _f_l_a_g;;;;

     If the _u_s_e-_l_e_a_s_e-_a_d_d_r-_f_o_r-_d_e_f_a_u_l_t-_r_o_u_t_e parameter is true in
     a  given  scope, then instead of sending the value specified
     in the routers option (or sending no value at all),  the  IP
     address  of  the lease being assigned is sent to the client.
     This supposedly causes Win95 machines  to  ARP  for  all  IP
     addresses, which can be helpful if your router is configured
     for proxy ARP.

     TTTThhhheeee _s_e_r_v_e_r-_i_d_e_n_t_i_f_i_e_r ssssttttaaaatttteeeemmmmeeeennnntttt





SunOS 5.6                 Last change:                         15






Headers, Environments, and Macros                   dhcpd.conf(5)



      sssseeeerrrrvvvveeeerrrr----iiiiddddeeeennnnttttiiiiffffiiiieeeerrrr _h_o_s_t_n_a_m_e;;;;

     The server-identifier statement can be used  to  define  the
     value  that is sent in the DHCP Server Identifier option for
     a given scope.   The value specified mmmmuuuusssstttt be an  IP  address
     for  the  DHCP  server, and must be reachable by all clients
     served by a particular scope.

     The use of the server-identifier  statement  is  not  recom-
     mended - the only reason to use it is to force a value other
     than the default value to be sent  on  occasions  where  the
     default value would be incorrect.   The default value is the
     first IP address associated with the physical network inter-
     face on which the request arrived.

     The usual case where the _s_e_r_v_e_r-_i_d_e_n_t_i_f_i_e_r  statement  needs
     to be sent is when a physical interface has more than one IP
     address, and the one being sent by default isn't appropriate
     for  some  or all clients served by that interface.  Another
     common case is when an alias is defined for the  purpose  of
     having  a  consistent IP address for the DHCP server, and it
     is desired that the clients use this IP  address  when  con-
     tacting the server.

     Supplying a value for the dhcp-server-identifier  option  is
     equivalent to using the server-identifier statement.

RRRREEEEFFFFEEEERRRREEEENNNNCCCCEEEE:::: OOOOPPPPTTTTIIIIOOOONNNN SSSSTTTTAAAATTTTEEEEMMMMEEEENNNNTTTTSSSS
     DHCP option statements are documented in the ddddhhhhccccpppp----ooooppppttttiiiioooonnnnssss((((5555))))
     manual page.

SSSSEEEEEEEE AAAALLLLSSSSOOOO
     dhcpd.conf(5), dhcpd.leases(5), RFC2132, RFC2131.

AAAAUUUUTTTTHHHHOOOORRRR
     ddddhhhhccccppppdddd((((8888)))) was written by Ted Lemon <mellon@vix.com>  under  a
     contract  with  Vixie  Labs.    Funding for this project was
     provided by the Internet Software  Consortium.   Information
     about  the  Internet  Software  Consortium  can  be found at
     hhhhttttttttpppp::::////////wwwwwwwwwwww....iiiisssscccc....oooorrrrgggg////iiiisssscccc....















SunOS 5.6                 Last change:                         16



