Introduction
------------

In DHCP, a unit test exercises a particular piece of code in 
isolation. There is a separate unit test per module or API. Each unit
test lives in a directory beneath the code it is designed to exercise.
So, we (will eventually) have:

    server/tests/
    client/tests/
    common/tests/
    dhcpctl/tests/

And so on.

Ideally each function would be invoked with every possible type of
input, and each branch of every function would be checked. In practice
we try to be a bit more pragmatic, and target the most basic
operations, as well tricky code, and areas we have seen bugs in the
past.

We are using ATF (Automated Test Framework) as a framework to run our
unittests.

Running Unit Tests
------------------

In order to run the unit tests for DHCP, enable ATF support during configure:

$ ./configure --enable-atf

And then use:

$ make check

This will run all of the unit tests. Make sure that ATF is actually
installed and that you have atf-run and atf-report tool in your PATH.

You can run a single test by going to the appropriate test directory 
and invoking the test directly:

$ cd server/tests
$ atf-run | atf-report

There are also a number of options that you can use when running a
test. See atf-run and atf-report documentation.

Adding a New Unit Test
----------------------

To add an additional test to an existing test program, you must create
a function for the new test in the C source file. You can extend existing
test suite or create a new one. For introductory example, see 
server/tests/simple_unittest.c. It is a skeleton example of ATF test.

Tests in specified directory must be registered in Atffile. See
server/tests/Atffile for example. Currently every executable with name
that falls into *_unittest pattern will be executed automatically.

Adding a New Unit Test Program
------------------------------

To add a new program, such as when a new module is added, you can copy
the "simple_unittest.c" file (in this directory) to a new name, add
the new file as a target in Makefile.am, and begin adding tests. Do
not forget to add it to CVS via "cvs add".

If there is no "tests" directory for a given subdirectory, then one 
must be created. This can be done by:

1. Creating the directory:
   
    $ mkdir $subdir/tests
    $ cvs add tests

2. Adding the subdirectory to the build system:

    Add to $subdir/Makefile.am:

        SUBDIRS = tests

    Add to the AC_OUTPUT macro in configure.ac:

        $subdir/tests/Makefile

3. Create a Makefile.am in the new directory, something like this:

    AM_CPPFLAGS = -I../..

    check_PROGRAMS = test_foo

    TESTS = test_foo

    test_foo_SOURCES = test_foo.c
    test_foo_LDADD = ../../tests/libt_api.a     # plus others...


See existing Makefile.am for examples, and the Automake documentation:

    http://www.gnu.org/software/automake/manual/html_node/Tests.html


Support Functions
-----------------

See http://www.netbsd.org/~jmmv/atf/index.html for details about ATF. Note
that although ATF was originally used for NetBSD validation, it is used
on many different platforms and is not NetBSD specific.

Additional Testing
------------------

Other static or runtime testing is always an option. For instance, you
can use valgrind to check for memory leaks.

$Id: HOWTO-unit-test,v 1.2.570.1 2012/01/31 15:50:15 tomasz Exp $
